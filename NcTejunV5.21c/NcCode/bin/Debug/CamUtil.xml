<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CamUtil</name>
    </assembly>
    <members>
        <member name="T:CamUtil.Angle3">
            <summary>
            ３個の軸角度で表す空間の回転を設定します。
            </summary>
        </member>
        <member name="T:CamUtil.Angle3.JIKU">
            <summary>
            軸の回転指定方法
            </summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.Null">
            <summary>指定なし（回転なし）</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.Euler_XYZ">
            <summary>ＸＹＺ系オイラー角（TEBIS 標準角、G0出力時）</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.Euler_ZXZ">
            <summary>ＺＸＺ系オイラー角（ファナックの傾斜面加工指令の座標系指定角度）</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.Spatial">
            <summary>空間角ＡＢＣ（TEBIS iTNC540 の２次元加工時）</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.DMU_BC">
            <summary>DMU200PのＢＣ軸回転角（TEBIS iTNC540 の３次元加工時）</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.MCCVG_AC">
            <summary>MCC3016VGのＡＣ軸回転角</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.D500_AC">
            <summary>D500のＡＣ軸回転角</summary>
        </member>
        <member name="F:CamUtil.Angle3.JIKU.General">
            <summary>任意軸回りの回転</summary>
        </member>
        <member name="M:CamUtil.Angle3.JIKU_Type(System.String)">
            <summary>軸の回転指定方法の名称からJIKU を決定します</summary>
        </member>
        <member name="M:CamUtil.Angle3.JIKU_Name(CamUtil.Angle3.JIKU)">
            <summary>軸の回転指定方法JIKU から軸の名称を決定します</summary>
        </member>
        <member name="M:CamUtil.Angle3.RtoD(System.Double)">
            <summary>ラジアンを度へ変換します（/Math.PI*180.0）</summary>
        </member>
        <member name="M:CamUtil.Angle3.DtoR(System.Double)">
            <summary>度をラジアンへ変換します（*Math.PI/180.0）</summary>
        </member>
        <member name="F:CamUtil.Angle3.a0">
            <summary>０角度(0.0, 0.0, 0.0)</summary>
        </member>
        <member name="M:CamUtil.Angle3.MachineEquals(CamUtil.Angle3,CamUtil.Angle3,System.Int32)">
            <summary>
            degree単位でＮＣデータの角度の同一性を確認
            </summary>
            <param name="a1">比較する角度１</param>
            <param name="a2">比較する角度２</param>
            <param name="decimals">小数点以下の有効桁数</param>
            <returns></returns>
        </member>
        <member name="F:CamUtil.Angle3.m_jiku">
            <summary>回転タイプ</summary>
        </member>
        <member name="F:CamUtil.Angle3.m_abc">
            <summary>３個の軸回転角度（単位はラジアン）</summary>
        </member>
        <member name="P:CamUtil.Angle3.Jiku">
            <summary>軸の回転タイプ</summary>
        </member>
        <member name="P:CamUtil.Angle3.A">
            <summary>Ａ軸の回転角度（ラジアン）</summary>
        </member>
        <member name="P:CamUtil.Angle3.B">
            <summary>Ｂ軸の回転角度（ラジアン）</summary>
        </member>
        <member name="P:CamUtil.Angle3.C">
            <summary>Ｃ軸の回転角度（ラジアン）</summary>
        </member>
        <member name="P:CamUtil.Angle3.DegA">
            <summary>Ａ軸の回転角度（度）</summary>
        </member>
        <member name="P:CamUtil.Angle3.DegB">
            <summary>Ｂ軸の回転角度（度）</summary>
        </member>
        <member name="P:CamUtil.Angle3.DegC">
            <summary>Ｃ軸の回転角度（度）</summary>
        </member>
        <member name="P:CamUtil.Angle3.Abs">
            <summary>絶対値（ラジアン）</summary>
        </member>
        <member name="M:CamUtil.Angle3.#ctor(CamUtil.Angle3.JIKU,CamUtil.Vector3)">
            <summary>
            回転タイプと軸回転角度（Vector3）から作成します
            </summary>
            <param name="p_jiku">回転タイプ</param>
            <param name="v1">軸回転角度（単位はラジアン）</param>
        </member>
        <member name="M:CamUtil.Angle3.SetA(System.Double)">
            <summary>角度Ａを設定します</summary>
        </member>
        <member name="M:CamUtil.Angle3.SetB(System.Double)">
            <summary>角度Ｂを設定します</summary>
        </member>
        <member name="M:CamUtil.Angle3.SetC(System.Double)">
            <summary>角度Ｃを設定します</summary>
        </member>
        <member name="M:CamUtil.Angle3.#ctor(CamUtil.Angle3.JIKU,System.String)">
            <summary>
            回転タイプと軸回転角度（単位は度）のテキストデータから作成します
            </summary>
            <param name="p_jiku">回転タイプ</param>
            <param name="strABC">軸回転角度（単位は度）を表す文字列</param>
        </member>
        <member name="M:CamUtil.Angle3.ToVector">
            <summary>
            ３個の軸回転角度を表すベクトルを出力します
            </summary>
            <returns>軸回転角度（ラジアン）</returns>
        </member>
        <member name="M:CamUtil.Angle3.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil.Angle3.ToString(System.Int32)">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。（小数点以下設定。0は省略）</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="T:CamUtil.Matrix">
            <summary>
            Ｎ行Ｍ列の行列を表します。[不変]
            </summary>
        </member>
        <member name="M:CamUtil.Matrix.op_UnaryNegation(CamUtil.Matrix)">
            <summary>－単項演算子</summary>
        </member>
        <member name="M:CamUtil.Matrix.op_Addition(CamUtil.Matrix,CamUtil.Matrix)">
            <summary>＋演算子</summary>
        </member>
        <member name="M:CamUtil.Matrix.op_Subtraction(CamUtil.Matrix,CamUtil.Matrix)">
            <summary>－演算子</summary>
        </member>
        <member name="M:CamUtil.Matrix.op_Multiply(CamUtil.Matrix,System.Double)">
            <summary>マトリックスと実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil.Matrix.op_Multiply(System.Double,CamUtil.Matrix)">
            <summary>実数とマトリックスの＊演算子</summary>
        </member>
        <member name="M:CamUtil.Matrix.op_Multiply(CamUtil.Matrix,CamUtil.Matrix)">
            <summary>マトリックスとマトリックスの＊演算子</summary>
            <param name="in1">入力１（Ｋ行Ｉ列）</param>
            <param name="in2">入力２（Ｉ行Ｊ列）</param>
            <returns>出力（Ｋ行Ｊ列）</returns>
        </member>
        <member name="M:CamUtil.Matrix.op_Division(CamUtil.Matrix,System.Double)">
            <summary>マトリックスと実数の／演算子</summary>
            <param name="in1">入力１（Ｋ行Ｉ列）</param>
            <param name="in2">入力２</param>
            <returns>出力（Ｋ行Ｊ列）</returns>
        </member>
        <member name="P:CamUtil.Matrix.LengthRow">
            <summary>行数</summary>
        </member>
        <member name="P:CamUtil.Matrix.LengthCol">
            <summary>列数</summary>
        </member>
        <member name="P:CamUtil.Matrix.Item(System.Int32,System.Int32)">
            <summary>指定した要素の値（数値は０から）</summary>
        </member>
        <member name="M:CamUtil.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>指定した列数、行数の０行列を作成します</summary>
            <param name="row">行数</param>
            <param name="col">列数</param>
        </member>
        <member name="M:CamUtil.Matrix.#ctor(System.Int32)">
            <summary>正方単位行列を作成します</summary>
            <param name="dimension">行数、列数（正方行列）</param>
        </member>
        <member name="M:CamUtil.Matrix.#ctor(System.Double[0:,0:])">
            <summary>２次元の実数配列を元に行列を作成します</summary>
        </member>
        <member name="M:CamUtil.Matrix.Clone">
            <summary>クローンを作成します</summary>
        </member>
        <member name="M:CamUtil.Matrix.Transposed">
            <summary>
            このインスタンスの転置行列を作成します
            </summary>
            <returns>転置行列</returns>
        </member>
        <member name="M:CamUtil.Matrix.Determinant">
            <summary>
            行列式の値を計算します
            </summary>
            <returns>行列式の値</returns>
        </member>
        <member name="M:CamUtil.Matrix.Inverse">
            <summary>
            このインスタンスの逆行列を作成します
            </summary>
            <returns>逆行列</returns>
        </member>
        <member name="M:CamUtil.Matrix.Cofactor(System.Int32,System.Int32)">
            <summary>
            このインスタンスの余因子（cofactor）を計算します（小行列に(-1)^(si+sj) を掛けたもの）
            </summary>
            <param name="si">余因子の行番号</param>
            <param name="sj">余因子の列番号</param>
            <returns>余因子</returns>
        </member>
        <member name="M:CamUtil.Matrix.ToDouble">
            <summary>
            １行１列の行列を実数に変換します
            </summary>
            <returns>変換された実数値</returns>
        </member>
        <member name="M:CamUtil.Matrix.ToVector3">
            <summary>
            ３行１列の行列をVector3へ変換します
            </summary>
            <returns>変換された３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.Matrix.ToVector3(System.Int32)">
            <summary>
            ３行Ｎ列の行列をVector3へ変換します
            </summary>
            <param name="col">列番号</param>
            <returns>変換された３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.Matrix.ToDoubleArray">
            <summary>実数配列へ変換します</summary>
            <returns>変換された実数２次元配列</returns>
        </member>
        <member name="M:CamUtil.Matrix.Orthogonal">
            <summary>
            ３行３列の行列が直交行列であるか判定します
            </summary>
            <returns> 直交行列である場合 true、そうでない場合 false</returns>
        </member>
        <member name="M:CamUtil.Matrix.Equals(CamUtil.Matrix)">
            <summary>このインスタンスと指定した Matrix オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.Quaternion">
             <summary>
            剛体の回転を表す四元数です。( cos(θ/2), Vx*sin(θ/2), Vy*sin(θ/2), Vz*sin(θ/2) )
             </summary>
        </member>
        <member name="M:CamUtil.Quaternion.op_UnaryNegation(CamUtil.Quaternion)">
            <summary>四元数の－単項演算子（同一の四元数になる）</summary>
        </member>
        <member name="M:CamUtil.Quaternion.op_Addition(CamUtil.Quaternion,CamUtil.Quaternion)">
            <summary>四元数の＋演算子</summary>
        </member>
        <member name="M:CamUtil.Quaternion.op_Subtraction(CamUtil.Quaternion,CamUtil.Quaternion)">
            <summary>四元数の－演算子</summary>
        </member>
        <member name="M:CamUtil.Quaternion.op_Multiply(CamUtil.Quaternion,CamUtil.Quaternion)">
            <summary>四元数と四元数の＊演算子</summary>
        </member>
        <member name="F:CamUtil.Quaternion.w">
            <summary>実数部</summary>
        </member>
        <member name="F:CamUtil.Quaternion.v">
            <summary>虚数部</summary>
        </member>
        <member name="P:CamUtil.Quaternion.W">
            <summary>実数部</summary>
        </member>
        <member name="P:CamUtil.Quaternion.V">
            <summary>虚数部</summary>
        </member>
        <member name="P:CamUtil.Quaternion.X">
            <summary>虚数部 i</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Y">
            <summary>虚数部 j</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Z">
            <summary>虚数部 k</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Abs">
            <summary>虚数部のベクトルの大きさ</summary>
        </member>
        <member name="M:CamUtil.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ＷとＸＹＺの座標値から作成します
            </summary>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CamUtil.Quaternion.ToUnit">
            <summary>単位四元数を作成します</summary>
        </member>
        <member name="M:CamUtil.Quaternion.ToDoubleArray">
            <summary>実数の２次元配列に出力します</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Conjugation">
            <summary>このインスタンスの共役四元数を出力します(conjugation)</summary>
        </member>
        <member name="T:CamUtil.Quaternion.Unit">
            <summary>
            実数部が正に限定された単位四元数です。３次元の回転を表します。
            </summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.RotQuat(System.Double,CamUtil.Vector3)">
            <summary>
            回転軸とその軸回りの回転角度から回転を定義します
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <param name="n">回転軸</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.RotQuat_X(System.Double)">
            <summary>
            Ｘ軸周りの回転角度から回転を定義します
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.RotQuat_Y(System.Double)">
            <summary>
            Ｙ軸周りの回転角度から回転を定義します
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.RotQuat_Z(System.Double)">
            <summary>
            Ｚ軸周りの回転角度から回転を定義します
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.op_Equality(CamUtil.Quaternion.Unit,CamUtil.Quaternion.Unit)">
            <summary>３Ｄベクトルの==演算子</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.op_Inequality(CamUtil.Quaternion.Unit,CamUtil.Quaternion.Unit)">
            <summary>３Ｄベクトルの!=演算子</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.op_Multiply(CamUtil.Quaternion.Unit,CamUtil.Quaternion.Unit)">
            <summary>単位四元数と単位四元数の＊演算子</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Unit.Angle">
            <summary>回転角θ（&gt;=0, &lt;=π）</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Unit.Vector">
            <summary>回転軸（単位ベクトル）</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Unit.W">
            <summary>四元数実数部</summary>
        </member>
        <member name="P:CamUtil.Quaternion.Unit.V">
            <summary>四元数虚数部</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.#ctor(System.Double,CamUtil.Vector3)">
            <summary>
            回転角(radian)と回転軸から作成します
            </summary>
            <param name="angl">回転角度(radian)</param>
            <param name="n">回転軸</param>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            実数部Ｗと虚数部ＸＹＺの値から作成します
            </summary>
            <param name="w">実数部Ｗ</param>
            <param name="x">虚数部ベクトルのＸ</param>
            <param name="y">虚数部ベクトルのＹ</param>
            <param name="z">虚数部ベクトルのＺ</param>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.#ctor(CamUtil.Matrix)">
            <summary>
            ３行３列の回転行列（直行行列）から作成します
            </summary>
            <param name="mat">回転行列</param>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.Conjugation">
            <summary>このインスタンスの共役回転四元数を出力します</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.ToQuaternion">
            <summary>四元数へ変換します</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.ToMatrix">
            <summary>列ベクトル用の回転行列を出力します</summary>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.Rotation(CamUtil.Vector3)">
            <summary>
            このインスタンスが位置ベクトルの回転を表す場合は位置ベクトルを回転します。
            このインスタンスが座標系の回転を表す場合は共役で位置ベクトルを回転します。
            </summary>
            <param name="vec">回転する位置ベクトル</param>
            <returns>回転後の位置ベクトル</returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.CheckGosa(CamUtil.Quaternion.Unit)">
            <summary>
            回転を表す単位四元数を回転後の単位ベクトルの位置誤差で比較します
            </summary>
            <param name="unt1">比較する単位四元数</param>
            <returns>回転後の単位ベクトル間の位置誤差(mm)</returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.Equals(System.Object)">
            <summary>このインスタンスと指定した Quaternion.Unit オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <remarks>半径1000mmで回転後の位置誤差が0.00001mm未満であれば同じ値とします</remarks>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が Quaternion.Unit のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil.Quaternion.Unit.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.RotationAxis">
            <summary>
            加工機の座標軸（工具の向き）回転角度を計算します。位置ベクトル（座標値）の回転方向でないので注意します[不変]
            </summary>
        </member>
        <member name="F:CamUtil.RotationAxis.gosa">
            <summary>最大誤差（０．０００１度換算）のラジアン値を返します</summary>
        </member>
        <member name="M:CamUtil.RotationAxis.Zero(System.Double)">
            <summary>ゼロとみなす数値（最大誤差以下）の場合 true、そうでない場合 false。</summary>
            <param name="rotang">判定する角度（ラジアン）</param>
            <returns>ゼロ判定</returns>
        </member>
        <member name="T:CamUtil.RotationAxis.TRANSFORM">
            <summary>
            座標系の変換方向（ワーク座標⇔フィーチャー[傾斜]座標）を表します
            </summary>
        </member>
        <member name="F:CamUtil.RotationAxis.TRANSFORM.WorkToFeature">
            <summary>ワーク座標からフィーチャ（傾斜）座標へ</summary>
        </member>
        <member name="F:CamUtil.RotationAxis.TRANSFORM.FeatureToWork">
            <summary>フィーチャ（傾斜）座標からワーク座標へ</summary>
        </member>
        <member name="M:CamUtil.RotationAxis.RotMatrix(CamUtil.Vector3,System.Double)">
            <summary>
            任意軸Ｎの周りの列ベクトル用の回転マトリックス（３Ｘ３）を作成します
            </summary>
            <param name="n">回転軸ベクトル</param>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns>３Ｘ３回転行列</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.RotMatrix_X(System.Double)">
            <summary>
            Ｘ軸周りの回転マトリックス（３Ｘ３）=== 列ベクトルの場合 ===
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns>３Ｘ３回転行列</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.RotMatrix_Y(System.Double)">
            <summary>
            Ｙ軸周りの回転マトリックス（３Ｘ３）=== 列ベクトルの場合 ===
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns>３Ｘ３回転行列</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.RotMatrix_Z(System.Double)">
            <summary>
            Ｚ軸周りの回転マトリックス（３Ｘ３）=== 列ベクトルの場合 ===
            </summary>
            <param name="angl">軸周りの回転角度(radian)</param>
            <returns>３Ｘ３回転行列</returns>
        </member>
        <member name="F:CamUtil.RotationAxis.quat">
            <summary>単位四元数で座標軸（工具）の回転情報を保存します。位置ベクトルの回転と共役の関係となります。</summary>
        </member>
        <member name="P:CamUtil.RotationAxis.Rot">
            <summary>加工軸回転があれば true、無ければ false</summary>
        </member>
        <member name="M:CamUtil.RotationAxis.#ctor(CamUtil.Angle3)">
            <summary>
            ３つの回転軸の回転角度から作成します
            </summary>
            <param name="abc"></param>
        </member>
        <member name="M:CamUtil.RotationAxis.#ctor(System.Double,CamUtil.Vector3)">
            <summary>
            １つの回転軸と回転角度から作成します
            </summary>
            <param name="ang">軸周りの回転角度(radian)</param>
            <param name="vec">回転軸ベクトル</param>
        </member>
        <member name="M:CamUtil.RotationAxis.SPATIAL">
            <summary>
            SPATIAL回転角を出力します
            </summary>
            <returns>SPATIAL角</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.Euler_XYZ">
            <summary>
            X-Y-Zオイラー角を出力します（未使用）
            </summary>
            <returns>X-Y-Zオイラー角</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.Euler_ZXZ">
            <summary>
            Z-X-Zオイラー角を出力します（-π/2 ≤ A ≤ π/2,-π ≤ B ≤ π,-π ≤ C ≤ π）
            </summary>
            <remarks>
            ファナックの傾斜面加工指令の座標系指定角度（G68.2X0Y0Z0I[degA]J[degB]K[degC]）。
            条件１．if (B==0) A=0 （C!=0）。
            条件２．if (B!=0) -π/2≤A≤π/2。
            </remarks>
            <returns>Z-X-Zオイラー角</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.DMU_BC">
            <summary>
            DMU200Pの３Ｄ固定５軸用（工具軸のみ）ＢＣ軸を出力します
            </summary>
            <returns>DMU200PのＢＣ軸</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.MCCVG_AC">
            <summary>
            MCC3016VGの３Ｄ固定５軸用（工具軸のみ）ＡＣ軸を出力します
            </summary>
            <returns>MCC3016VGのＡＣ軸</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.D500_AC">
            <summary>
            Ｄ５００の３Ｄ固定５軸用（工具軸のみ）ＡＣ軸を出力します
            </summary>
            <returns>SPATIAL角</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.General">
            <summary>
            任意軸回りの回転を表す四元数を行列表現（W, X, Y, Z）で出力します
            </summary>
            <returns>四元数（４行１列の行列。１行目が実数部）</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.Transform(CamUtil.RotationAxis.TRANSFORM,CamUtil.Vector3)">
            <summary>
            指示された位置の座標系変換（Work->Feature座標系, Feature->Work座標系）後の座標値を出力します
            </summary>
            <param name="tf">変換方向</param>
            <param name="value">位置情報</param>
            <returns>変換後の座標値</returns>
        </member>
        <member name="M:CamUtil.RotationAxis.ToolDir">
            <summary>工具軸方向（Ｚ＋）を出力します</summary>
            <returns>工具軸ベクトル</returns>
        </member>
        <member name="T:CamUtil.Vector3">
            <summary>
            ３次元ベクトルを表します。
            </summary>
        </member>
        <member name="F:CamUtil.Vector3.v0">
            <summary>０ベクトル(0.0, 0.0, 0.0)</summary>
        </member>
        <member name="F:CamUtil.Vector3.vi">
            <summary>単位座標ベクトル(1.0, 0.0, 0.0)</summary>
        </member>
        <member name="F:CamUtil.Vector3.vj">
            <summary>単位座標ベクトル(0.0, 1.0, 0.0)</summary>
        </member>
        <member name="F:CamUtil.Vector3.vk">
            <summary>単位座標ベクトル(0.0, 0.0, 1.0)</summary>
        </member>
        <member name="M:CamUtil.Vector3.Length(System.Double,System.Double)">
            <summary>ベクトルの長さ</summary>
        </member>
        <member name="M:CamUtil.Vector3.Length(System.Double,System.Double,System.Double)">
            <summary>ベクトルの長さ</summary>
        </member>
        <member name="M:CamUtil.Vector3.Vscal(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>スカラー積</summary>
        </member>
        <member name="M:CamUtil.Vector3.Vvect(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>ベクトル積</summary>
        </member>
        <member name="M:CamUtil.Vector3.Vangle(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>
            指定した２つのベクトルの角度を返します（0&gt;=angle&gt;=π）
            </summary>
            <param name="c1">ベクトル１</param>
            <param name="c2">ベクトル２</param>
            <returns>ラジアン単位のベクトル間の角度（０以上π以下）。</returns>
        </member>
        <member name="M:CamUtil.Vector3.Max(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>
            各要素ごとに大きい方の値で作成します
            </summary>
            <param name="xyz1">ベクトル１</param>
            <param name="xyz2">ベクトル２</param>
            <returns>各Ｘ、Ｙ、Ｚごとに大きい方を採用したベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.Min(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>
            各要素ごとに小さい方の値で作成します
            </summary>
            <param name="xyz1">ベクトル１</param>
            <param name="xyz2">ベクトル２</param>
            <returns>各Ｘ、Ｙ、Ｚごとに小さい方を採用したベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.op_Equality(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>３Ｄベクトルの==演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Inequality(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>３Ｄベクトルの!=演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_UnaryNegation(CamUtil.Vector3)">
            <summary>３Ｄベクトルの－単項演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Addition(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>３Ｄベクトルの＋演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Subtraction(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>３Ｄベクトルの－演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Multiply(CamUtil.Vector3,System.Double)">
            <summary>３Ｄベクトルと実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Multiply(System.Double,CamUtil.Vector3)">
            <summary>３Ｄベクトルと実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Division(CamUtil.Vector3,System.Double)">
            <summary>３Ｄベクトルと実数の／演算子</summary>
        </member>
        <member name="M:CamUtil.Vector3.op_Multiply(CamUtil.Matrix,CamUtil.Vector3)">
            <summary>３行３列のマトリックスと列ベクトルの積。結果はベクトル</summary>
            <param name="in1">入力（３行３列）</param>
            <param name="in2">入力（３次元ベクトル）</param>
            <returns>３次元ベクトル</returns>
        </member>
        <member name="F:CamUtil.Vector3.x">
            <summary>各ｘｙｚの要素</summary>
        </member>
        <member name="F:CamUtil.Vector3.y">
            <summary>各ｘｙｚの要素</summary>
        </member>
        <member name="F:CamUtil.Vector3.z">
            <summary>各ｘｙｚの要素</summary>
        </member>
        <member name="P:CamUtil.Vector3.X">
            <summary>X座標</summary>
        </member>
        <member name="P:CamUtil.Vector3.Y">
            <summary>Y座標</summary>
        </member>
        <member name="P:CamUtil.Vector3.Z">
            <summary>Z座標</summary>
        </member>
        <member name="P:CamUtil.Vector3.Abs">
            <summary>絶対値（ベクトルの長さ）</summary>
        </member>
        <member name="P:CamUtil.Vector3.Zero">
            <summary>0ベクトル判定</summary>
        </member>
        <member name="M:CamUtil.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            ＸＹＺの座標値から作成するコンストラクタ
            </summary>
            <param name="x">Ｘ座標値</param>
            <param name="y">Ｙ座標値</param>
            <param name="z">Ｚ座標値</param>
        </member>
        <member name="M:CamUtil.Vector3.ToMatrix">
            <summary>列ベクトルとしてマトリックスに変換します</summary>
        </member>
        <member name="M:CamUtil.Vector3.Rotation(System.Int32,System.Double)">
            <summary>
            基本軸回りに回転したベクトルを出力します
            </summary>
            <param name="g171819">平面設定値（=17[0,0,1],18[0,1,0],19[1,0,0]）</param>
            <param name="ang">軸周りの回転角度(単位：radian)</param>
            <returns>このインスタンスを回転したベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.Unit(System.Double)">
            <summary>
            指定の大きさのベクトルに変換します
            </summary>
            <param name="unit">ベクトルの大きさ</param>
            <returns>大きさを変換したベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.Unit">
            <summary>
            単位ベクトルに変換します
            </summary>
            <returns>大きさ１に変換したベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.ToVector2(System.Int32)">
            <summary>２次元ベクトルへ変換します</summary>
            <param name="g171819">平面指定ＧコードNo.(17,18,19)</param>
            <returns>このインスタンスの変換された２次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.Projection(CamUtil.Vector3)">
            <summary>
            指定平面へベクトルを投影します
            </summary>
            <param name="plane">指定平面の垂直ベクトル</param>
            <returns>投影された３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.Scaling(CamUtil.Vector3)">
            <summary>
            各軸個別の異方スケーリングを実行します
            </summary>
            <param name="scale">各軸のスケーリングする値</param>
            <returns>各軸ごとにスケーリングされた３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.Vector3.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil.Vector3.Equals(System.Object)">
            <summary>このインスタンスと指定した Vector3 オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が Vector3 のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.Vector3.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.SdgtNo">
            <summary>個々の軸 x, y, z, a, b, c を表します。</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.x">
            <summary>座標Ｘ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.y">
            <summary>座標Ｙ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.z">
            <summary>座標Ｚ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.a">
            <summary>座標Ａ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.b">
            <summary>座標Ｂ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.c">
            <summary>座標Ｃ</summary>
        </member>
        <member name="F:CamUtil.SdgtNo.Null">
            <summary>未定義</summary>
        </member>
        <member name="T:CamUtil.Ichi">
            <summary>
            加工機の位置情報（ＸＹＺＡＢＣの座標値）を処理します。回転軸ＡＢＣは任意です。
            </summary>
        </member>
        <member name="F:CamUtil.Ichi.gosa">
            <summary>同一点とみなす距離</summary>
        </member>
        <member name="F:CamUtil.Ichi.p0">
            <summary>０ベクトル(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Equality(CamUtil.Ichi,CamUtil.Ichi)">
            <summary>位置座標値の＝＝演算子。誤差がIchi.Gosa以内</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Inequality(CamUtil.Ichi,CamUtil.Ichi)">
            <summary>位置座標値の！＝演算子。誤差がIchi.Gosa以上</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Addition(CamUtil.Ichi,CamUtil.Ichi)">
            <summary>位置座標値の＋演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Subtraction(CamUtil.Ichi,CamUtil.Ichi)">
            <summary>位置座標値の－演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Multiply(CamUtil.Ichi,System.Double)">
            <summary>位置座標値と実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Multiply(System.Double,CamUtil.Ichi)">
            <summary>位置座標値と実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Division(CamUtil.Ichi,System.Double)">
            <summary>位置座標値と実数の／演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Addition(CamUtil.Ichi,CamUtil.Vector3)">
            <summary>位置座標値とベクトルの＋演算子</summary>
        </member>
        <member name="M:CamUtil.Ichi.op_Subtraction(CamUtil.Ichi,CamUtil.Vector3)">
            <summary>位置座標値とベクトルの－演算子</summary>
        </member>
        <member name="F:CamUtil.Ichi.rot_axis">
            <summary>回転軸設定の有無</summary>
        </member>
        <member name="P:CamUtil.Ichi.Digit">
            <summary>整数化する場合の倍率を出力する</summary>
        </member>
        <member name="F:CamUtil.Ichi.logd">
            <summary>整数化する場合の倍率のログをとった値</summary>
        </member>
        <member name="F:CamUtil.Ichi.xyz">
            <summary>個々の軸ＸＹＺ</summary>
        </member>
        <member name="F:CamUtil.Ichi.abc">
            <summary>個々の軸ＡＢＣ</summary>
        </member>
        <member name="P:CamUtil.Ichi.X">
            <summary>X座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Y">
            <summary>Y座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Z">
            <summary>Z座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.A">
            <summary>A座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.B">
            <summary>B座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.C">
            <summary>C座標値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Xi">
            <summary>X座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Yi">
            <summary>Y座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Zi">
            <summary>Z座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Ai">
            <summary>A座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Bi">
            <summary>B座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Ci">
            <summary>C座標整数値</summary>
        </member>
        <member name="P:CamUtil.Ichi.Item(CamUtil.SdgtNo)">
            <summary>
            実数座標値をsdgtNoインデックスより出力します。（単位：mm, deg）
            </summary>
        </member>
        <member name="M:CamUtil.Ichi.#ctor(System.Boolean,CamUtil.Vector3,CamUtil.Vector3,System.Int32)">
            <summary>
            位置情報(XYZABC)の３次元ベクトル表現より作成します。回転軸無しの場合はABC座標値は使われません。
            </summary>
            <param name="rot">回転軸の有無</param>
            <param name="v1">XYZ 座標値</param>
            <param name="a1">ABC 座標値</param>
            <param name="digit">整数化倍率（一般には1000）</param>
        </member>
        <member name="M:CamUtil.Ichi.#ctor(CamUtil.Vector3,System.Int32)">
            <summary>
            位置情報(XYZ)の３次元ベクトル表現より回転軸無しで作成します
            </summary>
            <param name="v1">v1 座標値</param>
            <param name="digit">整数化倍率</param>
        </member>
        <member name="M:CamUtil.Ichi.#ctor(CamUtil.Vector3,CamUtil.Vector3,System.Int32)">
            <summary>
            位置情報(XYZABC)の３次元ベクトル表現より回転軸ありで作成します。
            </summary>
            <param name="v1">XYZ 座標値</param>
            <param name="a1">ABC 座標値</param>
            <param name="digit">整数化倍率</param>
        </member>
        <member name="M:CamUtil.Ichi.ToXYZ">
            <summary>ＸＹＺ３軸ベクトルへ変換します</summary>
        </member>
        <member name="M:CamUtil.Ichi.ToABC">
            <summary>ＡＢＣ３軸ベクトルへ変換します</summary>
        </member>
        <member name="M:CamUtil.Ichi.Scaling(CamUtil.Vector3,CamUtil.Vector3)">
            <summary>
            位置ＸＹＺの異方スケーリングを実行しその位置情報を出力します。スケーリング値がマイナスの場合は回転軸ＡＢＣの向きも計算します。
            </summary>
            <param name="centr">スケーリングの中心</param>
            <param name="scale">異方スケーリング値（-1.0 の場合はミラーとなります）</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Ichi.Rotation(System.Int32,CamUtil.Vector3,System.Double)">
            <summary>
            このインスタンスの位置を回転します
            </summary>
            <param name="g171819"></param>
            <param name="centr">回転中心</param>
            <param name="angle">回転角度(radian)</param>
            <returns>回転後の位置情報</returns>
        </member>
        <member name="M:CamUtil.Ichi.Update(CamUtil.NcZahyo,CamUtil.NcZahyo)">
            <summary>座標値を移動情報を元に更新します。ＮＣデータでの座標値更新等に使用できます</summary>
            <param name="pXyz">位置を更新するXYZの値</param>
            <param name="pAbc">位置を更新するABCの値</param>
            <returns>更新された座標値</returns>
        </member>
        <member name="M:CamUtil.Ichi.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil.Ichi.Equals(System.Object)">
            <summary>このインスタンスと指定した Ichi オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が Ichi のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.Ichi.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.Pals">
            <summary>移動の量をパルス数（mmのUNIT倍）で表します</summary>
        </member>
        <member name="F:CamUtil.Pals.unit">
            <summary>１パルスあたりに進む距離（mm）の逆数</summary>
        </member>
        <member name="F:CamUtil.Pals.sdgtList">
            <summary>座標xyzabcのsdgtNoリスト</summary>
        </member>
        <member name="M:CamUtil.Pals.op_Equality(CamUtil.Pals,CamUtil.Pals)">
            <summary>パルス数の＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.Pals.op_Inequality(CamUtil.Pals,CamUtil.Pals)">
            <summary>パルス数の！＝演算子</summary>
        </member>
        <member name="F:CamUtil.Pals.set">
            <summary>有効な値が設定されている場合は true、そうでない場合は false。</summary>
        </member>
        <member name="F:CamUtil.Pals.x">
            <summary>パルス数</summary>
        </member>
        <member name="F:CamUtil.Pals.y">
            <summary>パルス数</summary>
        </member>
        <member name="F:CamUtil.Pals.z">
            <summary>パルス数</summary>
        </member>
        <member name="F:CamUtil.Pals.a">
            <summary>パルス数</summary>
        </member>
        <member name="F:CamUtil.Pals.b">
            <summary>パルス数</summary>
        </member>
        <member name="F:CamUtil.Pals.c">
            <summary>パルス数</summary>
        </member>
        <member name="M:CamUtil.Pals.#ctor(System.Int32)">
            <summary>
            値のないインスタンスを生成します
            </summary>
            <param name="dummy">ダミーです</param>
        </member>
        <member name="M:CamUtil.Pals.#ctor(CamUtil.Ichi)">
            <summary>
            位置情報で表された移動量より作成します
            </summary>
            <param name="ido">パルスの値</param>
        </member>
        <member name="M:CamUtil.Pals.#ctor(System.Int32[])">
            <summary>
            整数配列で表されたパルス数より作成します
            </summary>
            <param name="xyzabc">パルスの値</param>
        </member>
        <member name="M:CamUtil.Pals.Data(CamUtil.SdgtNo)">
            <summary>
            sdgtNoをインデックスとしてそれぞれのパルス数を出力します
            </summary>
            <param name="no">インデックス</param>
            <returns>パルス数</returns>
        </member>
        <member name="P:CamUtil.Pals.X0">
            <summary>Ｘパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.Y0">
            <summary>Ｙパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.Z0">
            <summary>Ｚパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.A0">
            <summary>Ａパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.B0">
            <summary>Ｂパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.C0">
            <summary>Ｃパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.Xyzabc0">
            <summary>ＸＹＺＡＢＣ軸すべてのパルス数が０である場合は true</summary>
        </member>
        <member name="P:CamUtil.Pals.X">
            <summary>Ｘ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.Y">
            <summary>Ｙ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.Z">
            <summary>Ｚ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.A">
            <summary>Ａ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.B">
            <summary>Ｂ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.C">
            <summary>Ｃ移動量</summary>
        </member>
        <member name="P:CamUtil.Pals.Item(CamUtil.SdgtNo)">
            <summary>sdgtNoインデックスより移動量を出力します（0:X 1:Y 2:Z 3:A 4:B 5:C）</summary>
        </member>
        <member name="M:CamUtil.Pals.ToXYZ">
            <summary>ＸＹＺの移動量をベクトルとして出力します</summary>
        </member>
        <member name="M:CamUtil.Pals.ToABC">
            <summary>ＡＢＣの移動量をベクトルとして出力します</summary>
        </member>
        <member name="M:CamUtil.Pals.ToIchi(System.Int32)">
            <summary>ＸＹＺＡＢＣの移動量を位置情報として出力します</summary>
            <param name="digit">>位置情報の整数化倍率</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Pals.Scaling(CamUtil.NcZahyo)">
            <summary>ミラーを実行します</summary>
            <param name="mirr">ミラーを表す座標値</param>
            <returns>ミラーされたパルス数</returns>
        </member>
        <member name="M:CamUtil.Pals.Min_Time(System.Int32[])">
            <summary>
            各軸の送り速度リストを用いて最小移動時間の軸の移動時間を算出します
            </summary>
            <param name="rf">各軸X,Y,Z,A,B,Cの送り速度のリスト（mm/min）</param>
            <returns>最小移動時間の軸の移動時間（秒）</returns>
        </member>
        <member name="M:CamUtil.Pals.MaxTimeAxis(System.Int32[],System.Boolean)">
            <summary>
            最も移動時間がかかる軸名を求めます
            </summary>
            <param name="rf">各軸X,Y,Z,A,B,Cの送り速度のリスト（mm/min）</param>
            <param name="max">rtが送り速度最大値の場合は true</param>
            <returns>軸名</returns>
        </member>
        <member name="M:CamUtil.Pals.HiChokusen(System.Int32[])">
            <summary>
            早送りの非直線時の中間点を求めるための移動残量リストを出力します
            </summary>
            <param name="rf">各軸X,Y,Z,A,B,Cの早送り速度のリスト（mm/min）</param>
            <returns>移動残量リスト</returns>
        </member>
        <member name="M:CamUtil.Pals.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil.Pals.Equals(System.Object)">
            <summary>このインスタンスと指定した Pals オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.Pals.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.NcZahyo">
            <summary>現在の位置情報を更新するためのnull許容ベクトルを表します。</summary>
            <remarks>ＮＣデータ１行の設定座標値、ミラーする基準位置とミラーの有無を表現します</remarks>
        </member>
        <member name="F:CamUtil.NcZahyo.Null">
            <summary>すべての座標値を更新しない場合の値</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.Update(CamUtil.Vector3,CamUtil.NcZahyo)">
            <summary>値がある場合に座標値を更新する。ＮＣデータでの座標値更新等に使用できる</summary>
            <param name="xyz">元のVector3</param>
            <param name="add">更新ベクトル</param>
            <returns>更新された３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil.NcZahyo.op_Equality(CamUtil.NcZahyo,CamUtil.NcZahyo)">
            <summary>位置座標値の＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.op_Inequality(CamUtil.NcZahyo,CamUtil.NcZahyo)">
            <summary>位置座標値の！＝演算子</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.op_UnaryNegation(CamUtil.NcZahyo)">
            <summary>位置座標値の－単項演算子</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.op_Addition(CamUtil.Vector3,CamUtil.NcZahyo)">
            <summary>位置座標値の＋演算子</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.op_Subtraction(CamUtil.Vector3,CamUtil.NcZahyo)">
            <summary>位置座標値の－演算子</summary>
        </member>
        <member name="F:CamUtil.NcZahyo.g3">
            <summary>Ｇコードグループ３の数値。90 : アブソリュート、91 : インクリメンタル。ミラーを表現する場合、不明の場合はnull</summary>
        </member>
        <member name="F:CamUtil.NcZahyo.x">
            <summary>未定義を含むＸＹＺの座標値</summary>
        </member>
        <member name="F:CamUtil.NcZahyo.y">
            <summary>未定義を含むＸＹＺの座標値</summary>
        </member>
        <member name="F:CamUtil.NcZahyo.z">
            <summary>未定義を含むＸＹＺの座標値</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.AbsInc">
            <summary>アブソリュートの場合は true、インクリメンタルの場合は false</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.X">
            <summary>Ｘ座標</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.Y">
            <summary>Ｙ座標</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.Z">
            <summary>Ｚ座標</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.#ctor(System.Int16,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>移動情報の場合で、Ｇコードグループ３（G90, G91）の値とＸＹＺそれぞれの移動値から作成します</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>ミラー情報の場合で、ミラーする軸の座標値（ミラーしない軸はnull）から作成します</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.ToVector">
            <summary>未定義の場合は０として、３次元ベクトルに変換します。</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.ToMirrXYZ">
            <summary>ミラーのオン（負）オフ（正）を絶対値１で符号化します。座標値の異方スケーリングで用います。</summary>
        </member>
        <member name="P:CamUtil.NcZahyo.ToMirrABC">
            <summary>ミラーオンオフによる回転の向きを絶対値１で符号化します。</summary>
        </member>
        <member name="M:CamUtil.NcZahyo.Equals(System.Object)">
            <summary>このインスタンスと指定した NcZahyo オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.NcZahyo.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil._Geometry_Plane">
            <summary>
            平面幾何。平面ベクトル演算の処理と、直線、円それぞれの交点などを処理します。
            </summary>
            <remarks>
            ３Ｄベクトルから平面ベクトルへの変換は３ＤベクトルCamUtil.Vector3のToVector2(int G171819)メソッドを用います
            </remarks>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vscal(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２次元ベクトルのスカラー積</summary>
            <param name="c1">始点ベクトル</param>
            <param name="c2">終点ベクトル</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vvect(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２次元ベクトルのベクトル積</summary>
            <param name="c1">始点ベクトル</param>
            <param name="c2">終点ベクトル</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vangle(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2,System.Int32)">
            <summary>
            円弧補間の回転角度（-2π&gt;angle&gt;2π）。始終点ベクトルの円弧長が0.00001mm未満の場合はエラーとします
            </summary>
            <remarks>
            ２つのベクトルがほぼ同一方向の場合は回転角度が０か±３６０かの判断が不可能なためエラーとし、よって2πあるいは-2πの円弧（全円）には対応しません。
            </remarks>
            <param name="h1">始点２次元ベクトル</param>
            <param name="h2">終点２次元ベクトル</param>
            <param name="g0203">回転方向（2:時計回り or 3:反時計回り）</param>
            <returns>回転角度(G0203==2:０以下, G0203==3:０以上)</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Intersection(CamUtil._Geometry_Plane.StraightLine,CamUtil._Geometry_Plane.StraightLine)">
            <summary>
            交点（２直線）
            </summary>
            <param name="l1">直線１</param>
            <param name="l2">直線２</param>
            <returns>交点の位置ベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Intersection(CamUtil._Geometry_Plane.StraightLine,CamUtil._Geometry_Plane.Circle,System.Boolean)">
            <summary>
            交点（直線と円）
            </summary>
            <remarks>交点があるかないかは判断しません。別途、直線と円との距離などにより判定してください。</remarks>
            <param name="ll">直線</param>
            <param name="cc">円</param>
            <param name="start">直線の方向の開始点側の交点を出力する場合はtrue、終点側はfalse</param>
            <returns>交点の位置ベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Intersection(CamUtil._Geometry_Plane.Circle,CamUtil._Geometry_Plane.Circle,System.Boolean)">
            <summary>
            交点（円と円）
            </summary>
            <param name="c1">円１</param>
            <param name="c2">円２</param>
            <param name="left">c1の中心からc2の中心方向のベクトルの左側の場合 true、右側の場合 false。</param>
            <returns>交点の位置ベクトル</returns>
        </member>
        <member name="T:CamUtil._Geometry_Plane.Vector2">
            <summary>
            ２次元ベクトル
            </summary>
        </member>
        <member name="F:CamUtil._Geometry_Plane.Vector2.v0">
            <summary>０ベクトル(0.0, 0.0)</summary>
        </member>
        <member name="F:CamUtil._Geometry_Plane.Vector2.vi">
            <summary>単位座標ベクトル(1.0, 0.0)</summary>
        </member>
        <member name="F:CamUtil._Geometry_Plane.Vector2.vj">
            <summary>単位座標ベクトル(0.0, 1.0)</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Equality(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルの==演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Inequality(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルの!=演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_UnaryNegation(CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルの－単項演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Addition(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルの＋演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Subtraction(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルの－演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Multiply(System.Double,CamUtil._Geometry_Plane.Vector2)">
            <summary>２Ｄベクトルと実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Multiply(CamUtil._Geometry_Plane.Vector2,System.Double)">
            <summary>２Ｄベクトルと実数の＊演算子</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.op_Division(CamUtil._Geometry_Plane.Vector2,System.Double)">
            <summary>２Ｄベクトルと実数の／演算子</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.Vector2.X">
            <summary>X座標値</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.Vector2.Y">
            <summary>Y座標値</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.Vector2.Abs">
            <summary>絶対値（ベクトルの長さ）</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            ＸＹの座標値から作成するコンストラクタ
            </summary>
            <param name="x">Ｘ座標値</param>
            <param name="y">Ｙ座標値</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.Unit(System.Double)">
            <summary>
            指定の大きさのベクトルに変換します
            </summary>
            <param name="unit">ベクトルの大きさ</param>
            <returns>大きさを変換したベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.Unit">
            <summary>
            単位ベクトルに変換します
            </summary>
            <returns>大きさ１に変換したベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.ToVector3(System.Int32,CamUtil.Vector3)">
            <summary>３次元ベクトルへ変換します</summary>
            <param name="g171819">平面指定ＧコードNo.(17,18,19)</param>
            <param name="kijun">基準点</param>
            <returns>変換された３次元ベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.Rotation(System.Double)">
            <summary>
            ベクトルを回転します
            </summary>
            <param name="ang">回転角度（ラジアン）</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.Equals(System.Object)">
            <summary>このインスタンスと指定した Vector2 オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が Vector2 のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.ToString">
            <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
            <returns>このインスタンスの値の文字列形式。</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Vector2.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil._Geometry_Plane.StraightLine">
            <summary>
            平面の直線
            </summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.StraightLine.A">
            <summary>一般形 AX + BY + C = 0 のＡ（A*A + B*B = 1）</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.StraightLine.B">
            <summary>一般形 AX + BY + C = 0 のＢ（A*A + B*B = 1）</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.StraightLine.C">
            <summary>一般形 AX + BY + C = 0 のＣ（A*A + B*B = 1）</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.StraightLine.Tangent">
            <summary>直線の傾き</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.StraightLine.ToVector2">
            <summary>直線方向の単位ベクトル</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.StraightLine.#ctor(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2,System.Boolean)">
            <summary>
            ２点を通る直線、あるいは２点の垂直二等分線を作成します
            ２点を通る直線の場合、直線の向きはベクトル v2 - v1 の向き、垂直二等分線の場合、直線の向きは点 v1 が左側となる向き。
            </summary>
            <param name="v1">基準（左側）</param>
            <param name="v2">方向（右側）</param>
            <param name="on">２点を通る場合 true、垂直二等分線の場合 false</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.StraightLine.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            一般形 aX + bY + c = 0 のa, b, c より作成します
            </summary>
            <param name="a">一般形 aX + bY + c = 0 のa</param>
            <param name="b">一般形 aX + bY + c = 0 のb</param>
            <param name="c">一般形 aX + bY + c = 0 のc</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.StraightLine.Distance(CamUtil._Geometry_Plane.Vector2)">
            <summary>
            点との距離を計算します。直線の向きの左側に点がある場合は正、右側が負となります
            </summary>
            <param name="p1">２次元の点の座標値</param>
            <returns>この直線と点との距離</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.StraightLine.Perpendicular(CamUtil._Geometry_Plane.Vector2)">
            <summary>
            指定された点から直線へ下した垂線の足の座標値を計算します
            </summary>
            <param name="p1">垂線の元となる点の座標値</param>
            <returns>垂線の足の座標値</returns>
        </member>
        <member name="T:CamUtil._Geometry_Plane.Circle">
            <summary>
            円
            </summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.Circle.Center">
            <summary>円の中心の座標値</summary>
        </member>
        <member name="P:CamUtil._Geometry_Plane.Circle.Radius">
            <summary>円の半径</summary>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Circle.#ctor(CamUtil._Geometry_Plane.Vector2,System.Double)">
            <summary>
            中心と半径から円を作成します
            </summary>
            <param name="center">中心点</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Circle.#ctor(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2,System.Double,System.Boolean)">
            <summary>
            円周上の２点と半径から円を作成します
            </summary>
            <param name="p1">円周上の点１</param>
            <param name="p2">円周上の点２</param>
            <param name="radius">半径</param>
            <param name="left">p2-p1ベクトルの左側に中心がある円を作成する場合はtrue、右側はfalse</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Circle.#ctor(CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2,CamUtil._Geometry_Plane.Vector2)">
            <summary>
            円周上の３点から円を作成します
            </summary>
            <param name="p1">円周上の点１</param>
            <param name="p2">円周上の点２</param>
            <param name="p3">円周上の点３</param>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Circle.Tangent(CamUtil._Geometry_Plane.Vector2)">
            <summary>
            円周上の点を通る接線を計算します。円周との距離は０．１以下にしてください
            </summary>
            <param name="p1">円周上の点</param>
            <returns>接線</returns>
        </member>
        <member name="M:CamUtil._Geometry_Plane.Circle.Tangent(CamUtil._Geometry_Plane.Vector2,System.Boolean)">
            <summary>
            円外の点を通る接線を計算します。直線方向はp1から円に向かう方向です
            </summary>
            <param name="p1">接線が通る円外の点</param>
            <param name="left">p1から円の中心に向かって左側の接線の場合 true、右側の場合は false。</param>
            <returns>接線</returns>
        </member>
        <member name="T:CamUtil.CamNcD.KijunSize">
            <summary>
            穴加工の基準寸法をデータベースから取得します
            </summary>
        </member>
        <member name="F:CamUtil.CamNcD.KijunSize.mawarSet">
            <summary>周り止めの穴寸法</summary>
        </member>
        <member name="F:CamUtil.CamNcD.KijunSize.helicSet">
            <summary>ヘリカル加工で使用するネジ穴寸法</summary>
        </member>
        <member name="F:CamUtil.CamNcD.KijunSize.tolerTbl">
            <summary>部位ごとの加工許容誤差</summary>
        </member>
        <member name="M:CamUtil.CamNcD.KijunSize.Mawaridome(System.String,System.Double)">
            <summary>
            データベースより周り止めの形状情報を取得します。
            </summary>
            <param name="progNo">プログラム番号</param>
            <param name="diam">ピン径区分</param>
        </member>
        <member name="M:CamUtil.CamNcD.KijunSize.HelicalTap(System.String,System.Double)">
            <summary>
            データベースよりヘリカル加工の形状情報を取得します
            </summary>
            <param name="progNo">プログラム番号</param>
            <param name="diam">ネジの呼び径</param>
        </member>
        <member name="M:CamUtil.CamNcD.KijunSize.Tolerance(System.Int32)">
            <summary>
            データベースより加工許容誤差の情報を取得します。
            </summary>
            <param name="No"></param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.CamNcD.MacroCode">
            <summary>
            固定サイクル、カスタムマクロのＮＣコード情報を提供します。
            </summary>
        </member>
        <member name="T:CamUtil.CamNcD.MacroCode.KAKO">
            <summary>加工と移動・ミラーを定義</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.KAKO.K_CHK">
            <summary>加工ありで、移動・ミラーの対象であるが未検証</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.KAKO.K_TRU">
            <summary>加工ありで、移動・ミラーの対象（xlist，zlistが対象）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.KAKO.K_FLS">
            <summary>測定などで、動作を追跡しない（移動・ミラーの定義なし）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.KAKO.K_NON">
            <summary>動作なし（移動・ミラーの変化なし）</summary>
        </member>
        <member name="M:CamUtil.CamNcD.MacroCode.MacroIndex(System.String)">
            <summary>'W'を用いてミラー時のアップカット、ダウンカットを制御するマクロのmacrowの位置。無い場合は -1</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.macrow">
            <summary>'W'を用いてミラー時のアップカット、ダウンカットを制御するマクロのリスト</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.NORM_NC">
            <summary>固定サイクルやカクタムマクロ以外の一般部ＮＣデータ</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.mCode">
            <summary>マクロコードのテーブル</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.kako">
            <summary>加工移動の区分</summary>
        </member>
        <member name="P:CamUtil.CamNcD.MacroCode.Ido">
            <summary>加工移動し、移動・ミラーの対象とするマクロ</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.hlist">
            <summary>引数のリスト</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.olist">
            <summary>省略可能リスト</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.xlist">
            <summary>XY軸に関連するコード。XY軸のミラー移動時に使用</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.zlist">
            <summary>Ｚ軸に関連するコード。Ｚ軸の移動時に使用</summary>
        </member>
        <member name="F:CamUtil.CamNcD.MacroCode.mess">
            <summary>マクロの説明</summary>
        </member>
        <member name="M:CamUtil.CamNcD.MacroCode.#ctor(System.Int32)">
            <summary>一般ＮＣデータ用コンストラクタ</summary>
        </member>
        <member name="M:CamUtil.CamNcD.MacroCode.#ctor(CamUtil.BaseNcForm,System.Int32)">
            <summary>固定サイクル/カスタムマクロ用コンストラクタ</summary>
        </member>
        <member name="T:CamUtil.CamNcD.NcInfo">
            <summary>
            ＮＣデータ個々の情報を管理します。
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.ToolULength(System.Double,System.Double)">
            <summary>
            NCSPEEDでは首下長が工具半径以下であるとエラーとなるため、
            ここで余裕をみて工具半径の１．５倍を最小値として設定する
            （坂本からの要望 2012/12/04）
            </summary>
            <param name="length">指定された突出し量</param>
            <param name="diameter">工具直径</param>
            <returns>ToolUsableLengthに設定する値</returns>
        </member>
        <member name="F:CamUtil.CamNcD.NcInfo.xmlDoc">
            <summary>ＸＭＬドキュメントデータ</summary>
        </member>
        <member name="F:CamUtil.CamNcD.NcInfo.ncinfoSchemaVer">
            <summary>読込んだスキーマのバージョン（"V04","V05","V06",...）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.NcInfo.xmlD">
            <summary>ＸＭＬ内のデータ</summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.#ctor">
            <summary>
            コンストラクタ（NcInfoCAMで使用）
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.#ctor(System.String)">
            <summary>
            コンストラクタ（スキーマによる検証とXPath の作成まで実行）
            </summary>
            <param name="ncFullName"></param>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlSave(System.String)">
            <summary>
            ＸＭＬデータの上書き（スキーマ検証しない）
            </summary>
            <param name="fulname">保存するファイル名</param>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEditFeed(System.Int32,CamUtil.LCode.NcLineCode.NcDist)">
            <summary>
            ＸＭＬデータの加工長、移動範囲の変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEdit(System.String,System.String)">
            <summary>
            ＸＭＬデータのテキスト変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEditTime(System.Int32,CamUtil.LCode.NcLineCode.NcDist)">
            <summary>
            ＸＭＬデータの加工時間の変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEditULength(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            ＸＭＬデータの工具有効長（突出し量）の変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEditSF(System.Int32,System.Double,System.Double)">
            <summary>
            ＸＭＬデータの回転数任意指示、送り速度任意指示の変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlEditLife(System.Int32,System.Double)">
            <summary>
            ＸＭＬデータの寿命長任意指示の変更
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlExport(System.Int32)">
            <summary>
            ＸＭＬデータの１工具情報の取出し
            </summary>
            <param name="tNo"></param>
        </member>
        <member name="M:CamUtil.CamNcD.NcInfo.XmlInsertMaterialSize(CamUtil.Vector3)">
            <summary>
            ＸＭＬデータの素材寸法入力
            </summary>
        </member>
        <member name="T:CamUtil.CamNcD.XmlNavi">
            <summary>
            ＸＭＬのデータを参照します。[不変]
            </summary>
        </member>
        <member name="T:CamUtil.CamNcD.XmlNavi.SchemaVersion">
            <summary>
            加工情報のスキーマ情報を保存する
            </summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.SchemaVersion.newVersion">
            <summary>最新のスキーマバージョン名</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.SchemaVersion.oldVersion">
            <summary>使用可能な最も古いスキーマバージョン番号</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.Latest">
            <summary>最新スキーマ</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.SchemaVersion.regVer">
            <summary>スキーマバージョン名のフォーマット</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.XmlCheck(System.Xml.XmlDocument)">
            <summary>
            xmlDocの設定（エラーハンドリング、ナビゲータ設定、スキーマによる検証）
            </summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.SchemaVersion.Name">
            <summary>読込んだスキーマのバージョン名（"V04","V05","V06",...）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.SchemaVersion.Numb">
            <summary>読込んだスキーマのバージョン番号</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.#ctor(System.String)">
            <summary>バージョン名より作成するコンストラクタ</summary>
            <param name="versionName"></param>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.#ctor(System.Xml.XmlDocument)">
            <summary>ＸＭＬファイルより作成するコンストラクタ</summary>
            <param name="xd"></param>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.Older(System.String)">
            <summary>スキーマのバージョンが指定のバージョンより古いか等しい場合はtrue</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.SchemaVersion.SchemaSet">
            <summary>定義言語スキーマの生成</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.bunkatsu">
            <summary>ＮＣＭＮによる工具分割がある場合true（工具単位情報は使用不可）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.xpathNavigator">
            <summary>ＸＭＬナビ</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.ncinfoSchemaVer">
            <summary>ＸＭＬスキーマバージョン</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.ToolCount">
            <summary>工具交換回数（注意：ＸＭＬの工具数でＵＮＩＸにて事前分割されたものは含まない）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Item(System.Int32)">
            <summary>
            工具単位のＮＣデータのＸＭＬ情報
            </summary>
            <param name="tcnt"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            XPathNavigatorの作成（唯一のコンストラクター）
            </summary>
            <param name="xmlDoc1"></param>
            <param name="ncinfoSchemaVer1"></param>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.BUHIN_NAME">
            <summary>部品名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.HENSHU_NAME">
            <summary>編集名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamDataName">
            <summary>0 ファイル名 Path.GetFileName(FULNM)</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamOriginalNcName">
            <summary>  検証前のファイル名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamSystemID">
            <summary>0 ＣＡＭシステム名 ADD 2011/10/10</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamOutputDateTime">
            <summary>1 ＮＣデータ出力日</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.ProcessName">
            <summary>0 プロセス名（車両部品名として使用 etc. MTO123AGRL）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.ProductsName">
            <summary>金型の部品名（編集名として使用する）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CoordinatesName">
            <summary>未使用（CADmeister Dynavista2D のみ設定あり）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamDataFullName">
            <summary>0 ＮＣデータのフルネーム</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamFolderName">
            <summary>0 フォルダーのフルネーム</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamBaseName">
            <summary>0 Path.GetFileNameWithoutExtension(FULNM)</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamMaterial">
            <summary>1 ＮＣデータ作成時の材質設定</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.OriginX">
            <summary>  加工原点Ｘ</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.OriginY">
            <summary>  加工原点Ｙ</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.OriginZ">
            <summary>  加工原点Ｚ</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.MaterialSize">
            <summary>  材料のサイズ。Ｚの値は取り付け冶具も含む</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.CamDimension">
            <summary>  ＣＡＭの次元。工具傾斜時の座標系設定方法と加工法を区分する。（２or３）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.PostProcessor">
            <summary>  ポストプロセッサ</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.BaseNcFormat">
            <summary>  ベースＮＣデータフォーマット</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.PostProcessorVersion">
            <summary>  ポストプロセッサのバージョン</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.MHEAD">
            <summary>  ＣＡＭで干渉チェックに使用されたマシンヘッド名（Tebis）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.SmNAM">
            <summary>0 シミュレーションシステム名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.SmMAT">
            <summary>検証出力の材質</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.SmMCN">
            <summary>検証出力の工作機</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.NcAPCHZ">
            <summary>1 クリアランス面のＮＣデータ最大値</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.NcClrPlaneList">
            <summary>1 クリアランス面のＮＣデータのリスト</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.ClpCheck">
            <summary>
            クリアランス面の整合性チェック 熊崎さんの要望により追加 in 2018/05/28
            </summary>
            <returns>エラーなし：null、エラーの場合：ＮＣデータ名、ツールセット名を出力</returns>
        </member>
        <member name="T:CamUtil.CamNcD.XmlNavi.Tool">
            <summary>
            工具単位のＸＭＬ情報の出力ストラクチャー[不変]
            </summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.Tool.tcnt">
            <summary>工具の番号（０から）</summary>
        </member>
        <member name="F:CamUtil.CamNcD.XmlNavi.Tool.parent">
            <summary>親のXmlNavi</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SNAME">
            <summary>1 ツールセットＣＡＭ名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.TTYPE">
            <summary>1 ＣＡＭシステムの工具種類</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmTSN">
            <summary>ツールセット名（ＮＣＳＰＥＥＤ）V03 2010.04.27 ADD</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.KOTEI">
            <summary>  工程区分（NCSPEED用）</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.Tool.OPTION">
            <summary>
            加工条件の任意指示(SPIN, FEED)の有無
            </summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.Tool.OPTION(System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
            <summary>
            加工条件の任意指示(SPIN, FEED)
            </summary>
            <param name="spin"></param>
            <param name="feed"></param>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.OPTSP">
            <summary>  加工条件の任意指示（ＳＰＩＮ）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.OPTFD">
            <summary>  加工条件の任意指示（ＦＥＥＤ）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.OPTLF">
            <summary>  加工条件の任意指示（ＬＩＦＥ）V04以降</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.OPTUL">
            <summary>  突出し量の任意指示</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.Item(System.Int32)">
            <summary>工具軸</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.AxisCount">
            <summary>工具軸：工具の工具軸数</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.Keisha">
            <summary>工具軸：傾斜加工か</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SimultaneousAxisControll">
            <summary>工具軸：同時５軸か</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.TlAPCHZ">
            <summary>1 クリアランス面の工具データ最大値</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ClrPlaneList">
            <summary>クリアランス面のリスト</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.MaxMachiningAxis">
            <summary>絶対値が最大の軸傾斜角</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.MachiningAxisList">
            <summary>軸傾斜角のリスト</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.NCLEN">
            <summary>1 加工長mm</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.RPLEN">
            <summary>早送り移動長さmm</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.NCTIM">
            <summary>1 加工時間min</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.NOFDT">
            <summary>  早送り時間min</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.CuttingTime">
            <summary>  実切削加工時間min</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.TULEN">
            <summary>2 突出し量</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.MaxXYZ">
            <summary>加工領域最大</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.MinXYZ">
            <summary>加工領域最小</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ZPICK">
            <summary>1 Ｚピック（すべて未指定、工程間不一致の場合 null）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.XPICK">
            <summary>1 XYピック（すべて未指定、工程間不一致の場合 null）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.NOKOS">
            <summary>1 残し量（すべて未指定、工程間不一致の場合 null）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.TOLER">
            <summary>1 トレランス（すべて未指定、工程間不一致の場合 null）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SPIND">
            <summary>1 ＮＣデータの回転数min-1   （==NCSEND2実行時のＤＢの値）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.FEEDR">
            <summary>1 ＮＣデータの送り速度mm/min（==NCSEND2実行時のＤＢの値）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.APRFED">
            <summary>1 アプローチ速度（未指定の場合、工程間不一致の場合 null）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.CTDIR">
            <summary>1 加工方向</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.METHD">
            <summary>1 加工法</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.KOTNM">
            <summary>1 工程名（ＸＭＬ必須）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.KTYPE">
            <summary>  工程タイプ</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.KCLSS">
            <summary>  工程区分</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.KCYCL">
            <summary>  工程のＮＣサイクル名</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.TRTIP">
            <summary>  ＮＣデータのリファレンス点が刃先=Tipならtrue、工具中心=Centerならfalse</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.CMMNT">
            <summary>  ＮＣデータ出力時に入力されたコメント（Tebis）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmFDR">
            <summary>ＸＭＬ切削送りに対する総合比率（ToolsetCAM,材質,加工機）V03 2010.04.27 ADD</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmSPR">
            <summary>ＸＭＬ回転数に対する総合比率（ToolsetCAM,材質,加工機）V03 2010.04.27 ADD</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ClMv_Offset">
            <summary>  ＮＣデータの移動情報 倒れ補正のための面オフセット量（in ＣＡＭ）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ClMv_X_axis">
            <summary>  ＮＣデータの移動情報 ＣＬ移動済み量 Ｘ軸方向（in NCSPEED）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ClMv_Y_axis">
            <summary>  ＮＣデータの移動情報 ＣＬ移動済み量 Ｙ軸方向（in NCSPEED）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.ClMv_Z_axis">
            <summary>  ＮＣデータの移動情報 ＣＬ移動済み量 Ｚ軸方向（in NCSPEED）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmCLC">
            <summary>コリジョンのチェック結果V03 2010.04.27 ADD</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmTSS">
            <summary>検証内容_ツールセット選択V03 2010.04.27 ADD</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmTSB">
            <summary>検証内容_ツールセット最適化</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmFDC">
            <summary>検証内容_送り速度最適化</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmACD">
            <summary>検証内容_エアカット削除</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.Tool.SmLNS">
            <summary>検証内容_工具寿命分割</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.Tool.#ctor(CamUtil.CamNcD.XmlNavi,System.Int32,CamUtil.CamNcD.XmlNavi.SchemaVersion)">
            <summary>
            コンストラクタ
            </summary>
            <param name="p_parent"></param>
            <param name="p_tcnt"></param>
            <param name="p_ncinfoSchemaVer"></param>
        </member>
        <member name="T:CamUtil.CamNcD.XmlNavi.TAxis">
            <summary>
            工具軸単位のストラクチャ
            </summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.SimultaneousAxisControll">
            <summary>５軸同時制御</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.ClearancePlane">
            <summary>1 クリアランスプレーン</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.MachiningAxisAngle">
            <summary>  傾斜軸の回転角</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.PlaneSpatial">
            <summary>  ハイデンハインの空間角、DMU200PのＢ軸Ｃ軸</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.MachiningAxis">
            <summary>  傾斜軸の回転角（Tebis標準仕様 = ＸＹＺオイラー角）</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.EulerAngleZXZ">
            <summary>  オイラー角</summary>
        </member>
        <member name="P:CamUtil.CamNcD.XmlNavi.TAxis.RotaryAxisAngle">
            <summary>  ＶＧのＡ軸Ｃ軸</summary>
        </member>
        <member name="M:CamUtil.CamNcD.XmlNavi.TAxis.#ctor(CamUtil.CamNcD.XmlNavi.Tool,CamUtil.CamNcD.XmlNavi.SchemaVersion,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="tool"></param>
            <param name="p_ncinfoSchemaVer"></param>
            <param name="tcnt"></param>
            <param name="ii"></param>
        </member>
        <member name="T:CamUtil.BaseNcForm">
            <summary>
            使用するＮＣデータの形式名であるベースＮＣデータフォーマットを設定します。データベースのツールセットの区分にも使用されます。
            現在は GENERAL, 5AXIS, GRAPHITE の３種類です。
            </summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.EMPTY">
            <summary>未設定</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.GENERAL">
            <summary>GENERAL</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.BUHIN">
            <summary>5AXIS</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.GRAPHITE">
            <summary>グラファイト電極加工</summary>
        </member>
        <member name="T:CamUtil.BaseNcForm.ID">
            <summary>ＩＤ番号</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.ID.EMPTY">
            <summary></summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.ID.GENERAL">
            <summary>西溝口工場で決められた一般的ＮＣデータ形式のＮＣデータフォーマット</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.ID.BUHIN">
            <summary>Tebisで使用する部品加工専用のＮＣデータフォーマット</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.ID.GRAPHITE">
            <summary>グラファイト電極加工専用のＮＣデータフォーマット</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.Id">
            <summary>ＮＣデータフォーマットID</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.Name">
            <summary>ＮＣデータフォーマット名</summary>
        </member>
        <member name="F:CamUtil.BaseNcForm.Code">
            <summary>データベースで使用する区分コード</summary>
        </member>
        <member name="M:CamUtil.BaseNcForm.#ctor(CamUtil.BaseNcForm.ID,System.String,System.String)">
            <summary>ベースＮＣデータフォーマット名から作成するコンストラクタ</summary>
        </member>
        <member name="T:CamUtil.CamSystem">
            <summary>
            ＣＡＭシステムの種類を設定します。
            </summary>
        </member>
        <member name="F:CamUtil.CamSystem.Empty">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.Tebis">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.Dynavista2D">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.WorkNC">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.CADCEUS">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.CAMTOOL">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.CAMTOOL_5AXIS">
            <summary>５軸対応CAMTOOL in 2015/07/03</summary>
        </member>
        <member name="F:CamUtil.CamSystem.CADmeisterKDK">
            <summary></summary>
        </member>
        <member name="F:CamUtil.CamSystem.CamSystems">
            <summary>使用可能なCamSystemのリスト</summary>
        </member>
        <member name="F:CamUtil.CamSystem.Name">
            <summary>ＣＡＭのシステム名</summary>
        </member>
        <member name="F:CamUtil.CamSystem.NickName">
            <summary>ＣＡＭのニックネーム</summary>
        </member>
        <member name="F:CamUtil.CamSystem.Dimension">
            <summary>ＣＡＭの次元</summary>
        </member>
        <member name="F:CamUtil.CamSystem.Ncsend">
            <summary>NCSENDへの表示</summary>
        </member>
        <member name="F:CamUtil.CamSystem.SortNo">
            <summary>表示順</summary>
        </member>
        <member name="F:CamUtil.CamSystem.Tset">
            <summary>ツールセット情報の有無</summary>
        </member>
        <member name="M:CamUtil.CamSystem.#ctor(System.String,System.String,System.Byte,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            ＣＡＭのシステム名から作成するコンストラクタ
            </summary>
            <param name="name"></param>
            <param name="nickname"></param>
            <param name="dim"></param>
            <param name="ncsend"></param>
            <param name="sortno"></param>
            <param name="tset"></param>
        </member>
        <member name="M:CamUtil.CamSystem.#ctor(System.String)">
            <summary>
            ＣＡＭのシステム名から作成するコンストラクタ
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CamUtil.CamSystem.ToString">
            <summary>
            ＣＡＭシステムのニックネーム
            コンボボックスで使用しているのでToStringのオーバーライド必要
            </summary>
            <returns></returns>
        </member>
        <member name="T:CamUtil.PostProcessor">
            <summary>
            ポストプロセッサの種類を設定します
            </summary>
        </member>
        <member name="T:CamUtil.PostProcessor.PostProcessorCode">
            <summary>ポストを決定するＣＡＭのコードです</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.PostProcessorCode.CamSystemName">
            <summary>ポストを決定するＣＡＭシステム名</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.PostProcessorCode.PostCode">
            <summary>ポストを決定するＣＡＭのポストコード</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.PostProcessorCode.PostID">
            <summary>決定したポストID</summary>
        </member>
        <member name="M:CamUtil.PostProcessor.PostProcessorCode.#ctor(System.String,System.String,System.String)">
            <summary>ＤＢより作成します</summary>
        </member>
        <member name="T:CamUtil.PostProcessor.ID">
            <summary>ＩＤ番号</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.GEN_OM">
            <summary>Tebis 主型用固定５軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.CPC_DMU_OM">
            <summary>Tebis ＤＭＵ用同時５軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.GEN_BU">
            <summary>Tebis 部品用固定５軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.CPC_D500_BU">
            <summary>Tebis D500用同時５軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.MES_AFT_BU">
            <summary>Tebis 部品用形状測定（後計測）</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.MES_BEF_BU">
            <summary>Tebis 部品用基準測定（前計測）</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.GENERAL">
            <summary>Caelum, CADCEUS</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.HDNC2210_FNC208">
            <summary>Dynavista2D</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.MCC2013_MCD1513">
            <summary>Dynavista2D</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.TG3X">
            <summary>CAMTOOL</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.TG5X">
            <summary>CAMTOOL_5AXIS</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.TG2ZXZ">
            <summary>CAMTOOL_5AXIS</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.TG5Xauto">
            <summary>CAMTOOL_5AXIS</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.FANUC_TG">
            <summary>CADmeisterKDK</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.gousei5">
            <summary>WorkNC ５軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.GOUSEI">
            <summary>WorkNC ３軸</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.ID.NULL">
            <summary>未設定</summary>
        </member>
        <member name="M:CamUtil.PostProcessor.ChangeName(System.String)">
            <summary>XML Version V15(2019/04/15 12:00 ～ 2019/05/06 12:00)に作成されたＸＭＬのポスト名を変換する</summary>
        </member>
        <member name="M:CamUtil.PostProcessor.GetPost(CamUtil.PostProcessor.ID)">
            <summary>ポストＩＤに対応するポストポロセッサを返します</summary>
            <param name="postProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.PostProcessor.GetPost(System.String)">
            <summary>ポスト名に対応するポストポロセッサを返します</summary>
            <param name="postProcessorName"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.PostProcessor.GetPost(System.String,System.String)">
            <summary>ポストコードに対応するポストポロセッサを返します</summary>
            <param name="camSystemName"></param>
            <param name="postProcessorCode"></param>
        </member>
        <member name="F:CamUtil.PostProcessor.Id">
            <summary>ポストポロセッサ識別番号</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.Name">
            <summary>ポストポロセッサ名</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.CamSys">
            <summary>CamSystem</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.BaseForm">
            <summary>BaseNcForm</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.AxisType">
            <summary>軸回転タイプ</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.AxisDoji">
            <summary>軸回転同時制御</summary>
        </member>
        <member name="F:CamUtil.PostProcessor.Code">
            <summary>DUMMY</summary>
        </member>
        <member name="M:CamUtil.PostProcessor.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            データベースから作成
            </summary>
            <param name="camSystemName"></param>
            <param name="postProcessorName"></param>
            <param name="baseNcFormName"></param>
            <param name="axisType"></param>
            <param name="axisDoji"></param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.MachineHead">
            <summary>
            マシンヘッドの情報を管理します。現在使用しているＣＡＭシステムは CamSystem.Tebis のみです。
            </summary>
        </member>
        <member name="M:CamUtil.MachineHead.CheckPost(System.String,CamUtil.PostProcessor)">
            <summary>ポストプロセッサとの整合</summary>
        </member>
        <member name="M:CamUtil.MachineHead.CheckMachine(System.String,CamUtil.PostProcessor,System.String)">
            <summary>加工機との整合</summary>
        </member>
        <member name="F:CamUtil.MachineHead.headName">
            <summary>マシンヘッド名</summary>
        </member>
        <member name="F:CamUtil.MachineHead.postID">
            <summary>ポストプロセッサID</summary>
        </member>
        <member name="F:CamUtil.MachineHead.machID">
            <summary>設備ID</summary>
        </member>
        <member name="T:CamUtil.ProgVersion">
            <summary>
            プログラムのバージョンを管理します。バージョン番号は major, minor, revision で、試行版の区分は rtm で設定します。
            </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.major">
            <summary>バージョン番号</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.minor">
            <summary>バージョン番号</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.rtm">
            <summary>正式版 0、試行版 >0
            試行版1 1bitON 0b0001: 部品加工の同時５軸対応版(坂本)
            試行版2 2bitON 0b0010: 部品加工の倒れ補正（熊崎）
            試行版3 3bitON 0b0100:
            試行版4 4bitON 0b1000:
            </summary>
        </member>
        <member name="P:CamUtil.ProgVersion.NotTrialVersion1">
            <summary>試行版１ではない場合 true</summary>
        </member>
        <member name="P:CamUtil.ProgVersion.NotTrialVersion2">
            <summary>試行版２ではない場合 true</summary>
        </member>
        <member name="P:CamUtil.ProgVersion.NotTrialVersion3">
            <summary>試行版３ではない場合 true</summary>
        </member>
        <member name="P:CamUtil.ProgVersion.NotTrialVersion4">
            <summary>試行版４ではない場合 true</summary>
        </member>
        <member name="P:CamUtil.ProgVersion.Debug">
            <summary>デバッグモードか否かのフラッグ</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.ProgFull">
            <summary>実行プログラムのフルパス名</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.ProgTime">
            <summary>実行プログラムの更新時間</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.VerName0">
            <summary>バージョン名0</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.VerName1">
            <summary>バージョン名1</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.VerName2">
            <summary>バージョン名2</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.NcOutChkProb">
            <summary>３次元ＮＣデータ出力時の暫定処理チェック確率</summary>
        </member>
        <member name="F:CamUtil.ProgVersion.spd_ncsnd">
            <summary>NCSEND2実行時間(sec) CAMTOOL/SPD_SAMPLE/JUCD01-20 </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.spd_ncspd">
            <summary>NCSPEED実行時間(sec) PTP/_TEST_speed/MQFK30-41 </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.spd_ncouO">
            <summary>OUTPUT実行時間(sec) PTP/_TEST_speed/MQFK30-41(ORG) </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.spd_ncouE">
            <summary>OUTPUT実行時間(sec) PTP/_TEST_speed/MQFK30-41(EDIT) </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.rat_ncsnd">
            <summary>NCSEND2実行時間比率 CAMTOOL/SPD_SAMPLE/JUCD01-20 </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.rat_ncspd">
            <summary>NCSPEED実行時間比率 PTP/_TEST_speed/MQFK30-41 </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.rat_ncouO">
            <summary>OUTPUT実行時間比率 PTP/_TEST_speed/MQFK30-41(ORG) </summary>
        </member>
        <member name="F:CamUtil.ProgVersion.rat_ncouE">
            <summary>OUTPUT実行時間比率 PTP/_TEST_speed/MQFK30-41(EDIT) </summary>
        </member>
        <member name="M:CamUtil.ProgVersion.CheckVersion(System.String)">
            <summary>バージョンのチェック</summary>
        </member>
        <member name="T:CamUtil.LogOut">
            <summary>
            プログラムのログ出力を管理します。
            </summary>
        </member>
        <member name="F:CamUtil.LogOut.warn">
            <summary>ワーニングのメッセージ</summary>
        </member>
        <member name="F:CamUtil.LogOut.checkListExcept">
            <summary>プログラム実行ログ出力の停止リスト</summary>
        </member>
        <member name="F:CamUtil.LogOut.OutputList">
            <summary>プログラム実行ログ出力の出力済リスト</summary>
        </member>
        <member name="F:CamUtil.LogOut.OutputListCnt">
            <summary>プログラム実行ログの回数リスト</summary>
        </member>
        <member name="F:CamUtil.LogOut.idle_exit">
            <summary>LogOutのログ出力のイベントを設定</summary>
        </member>
        <member name="T:CamUtil.LogOut.FNAM">
            <summary>ログを保存するファイル名</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.NCSENDLOG">
            <summary>Log_NCSEND2.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.NCDOUTPUT">
            <summary>Log_NcOutput.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.MACROTENK">
            <summary>Log_MacroTenkai.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.BUHINFEED">
            <summary>Log_BuhinFcode.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.NCCONVERT">
            <summary>Log_Convert.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.BUHINBUNK">
            <summary>Log_BUNKATSU.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.TMATCHING">
            <summary>Log_ToolMatching.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.NCSPEEDLG">
            <summary>Log_NCSPEEDJunbi.txt</summary>
        </member>
        <member name="F:CamUtil.LogOut.FNAM.MAX">
            <summary>最大値。常に最後においておくこと</summary>
        </member>
        <member name="M:CamUtil.LogOut.UpdateCheckListExcept">
            <summary>プログラム実行ログ出力の停止リストの更新</summary>
        </member>
        <member name="M:CamUtil.LogOut.CheckZantei(System.String,System.String,System.String,System.Int32)">
            <summary>
            =========================================================
            プログラムの変更に伴う暫定チェック
            =========================================================
            </summary>
        </member>
        <member name="M:CamUtil.LogOut.CheckError(System.String,System.String,System.String,System.Int32)">
            <summary>
            =========================================================
            プログラムの変更に伴う暫定チェックのエラー処理
            =========================================================
            </summary>
        </member>
        <member name="M:CamUtil.LogOut.CheckCount(System.String,System.Boolean,System.String)">
            <summary>プログラム実行ログを出力する</summary>
        </member>
        <member name="M:CamUtil.LogOut.CheckCountOutput">
            <summary>プログラム実行ログを出力する（アイドルイベントから実行される）</summary>
        </member>
        <member name="M:CamUtil.LogOut.CheckOutput(CamUtil.LogOut.FNAM,System.String,System.String,System.String)">
            <summary>ログを出力する</summary>
        </member>
        <member name="M:CamUtil.LogOut.Warning(System.String)">
            <summary>ワーニングメッセージを表示する</summary>
        </member>
        <member name="T:CamUtil.ClLink5Axis">
            <summary>
            ５軸加工での複数工程ＣＬ接続するＮＣコードを規定します。
            </summary>
            <remarks>
            接続で作成されたＣＬは干渉チェックがされていない。３軸加工の場合はクリアランス面まで退避すれば
            特に問題はないが、５軸加工の場合は回避動作時の干渉や工具軸を変える場合の動作で干渉しないように
            考慮しなければならない。
            </remarks>
        </member>
        <member name="F:CamUtil.ClLink5Axis.codeStart">
            <summary>工具軸初期値設定コード P9697</summary>
        </member>
        <member name="F:CamUtil.ClLink5Axis.codeChgAX">
            <summary>工具軸変更設定コード P9698</summary>
        </member>
        <member name="F:CamUtil.ClLink5Axis.codeKotei">
            <summary>工程間移動コード P9699</summary>
        </member>
        <member name="F:CamUtil.ClLink5Axis.codeAll">
            <summary>すべてのコード P969</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.Start">
            <summary>元ＮＣデータの工具軸初期値設定コード M98P9697</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.ChgAX">
            <summary>元ＮＣデータの工具軸変更設定コード M98P9698</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.Kotei">
            <summary>元ＮＣデータの工程間移動コード M98P9699</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.Start_G">
            <summary>検証ＮＣデータの工具軸初期値設定コード G65P9697</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.ChgAX_G">
            <summary>検証ＮＣデータの工具軸変更設定コード G65P9698</summary>
        </member>
        <member name="P:CamUtil.ClLink5Axis.Kotei_G">
            <summary>検証ＮＣデータの工程間移動コード G65P9699</summary>
        </member>
        <member name="M:CamUtil.ClLink5Axis.Exists(System.String)">
            <summary>工程間接続コードの有無を調べる</summary>
        </member>
        <member name="M:CamUtil.ClLink5Axis.ChangeNormalCode(System.String)">
            <summary>ユーリカの工程間接続コードを元の接続コードに戻す</summary>
        </member>
        <member name="M:CamUtil.ClLink5Axis.Exists_G(System.String)">
            <summary>ユーリカの工程間接続コードの有無を調べる</summary>
        </member>
        <member name="M:CamUtil.ClLink5Axis.KOTEI_IDO(CamUtil.Machine.MachID)">
            <summary>工程間移動に対応している加工機</summary>
        </member>
        <member name="T:CamUtil.StringLengthDB">
            <summary>
            出力するデータベースにより制限される文字数を設定します。
            </summary>
        </member>
        <member name="F:CamUtil.StringLengthDB.maxProcsName">
            <summary>プロセス名の最大文字数</summary>
        </member>
        <member name="F:CamUtil.StringLengthDB.maxCoordName">
            <summary>編集名（コーディネート名）の最大文字数</summary>
        </member>
        <member name="F:CamUtil.StringLengthDB.maxCamCommnt">
            <summary>ＣＡＭコメントの最大文字数</summary>
        </member>
        <member name="F:CamUtil.StringLengthDB.maxNcOutName">
            <summary>ＮＣデータ出力名の最大文字数</summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_SeizoNumb(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_TejunName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_ToolSheet(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_shainCode(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_MachnName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_DandrName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_SimSystem(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_SimMachin(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_KoteiCode(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_BuhinName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_NcOutName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_TejunComm(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_ToolgName(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_SimlKekka(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_AxisNumbr(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_AxisTypeS(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_KH_Direct(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_KH_Method(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_KH_dimns1(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_KH_dimns2(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_MaterialG(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.Moji_NcOutName(CamUtil.BaseNcForm,System.String,System.Int32)">
            <summary>
            出力名のチェックとメッセージの作成
            </summary>
            <param name="bnf"></param>
            <param name="outName">出力名。部品加工のＮＣデータ識別文字は含まない</param>
            <param name="toolCount">工具数</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.StringLengthDB.#ctor">
            <summary>唯一のコンストラクタ</summary>
        </member>
        <member name="M:CamUtil.StringLengthDB.MaxRemove(System.String,System.String)">
            <summary>最大文字数を超えている場合に末尾を切り取る</summary>
            <param name="ss">文字列</param>
            <param name="dnam">ＸＭＬのデータ名</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.StringLengthDB.ErrorOut(System.String)">
            <summary>エラーの文字列を出力</summary>
            <param name="mess"></param>
        </member>
        <member name="T:CamUtil.RO_Collection`1">
            <summary>
            読み取り専用コレクションに利用するインデクサを持つジェネリックスクラスです。
            </summary>
            <remarks>
            使い方：private でRO_Collection.InnerArray あるいはRO_Collection.InnerList を作成し、その中のreadonlyフィールド AsReadOnly をプロパティとして公開します。
            RO_Collection.InnerArray は配列として要素の参照変更のみ可能で、InnerList はList&lt;T&gt;をそのまま継承しています。
            </remarks>
        </member>
        <member name="T:CamUtil.RO_Collection`1.InnerArray">
            <summary>読み取り専用配列プロパティの元となる変更可能な配列を定義します</summary>
        </member>
        <member name="F:CamUtil.RO_Collection`1.InnerArray.AsReadOnly">
            <summary>読み取り専用のコレクション</summary>
        </member>
        <member name="P:CamUtil.RO_Collection`1.InnerArray.Length">
            <summary>配列の長さ</summary>
        </member>
        <member name="P:CamUtil.RO_Collection`1.InnerArray.Item(System.Int32)">
            <summary>変更可能な配列</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.InnerArray.#ctor(System.Int32)">
            <summary>空の１次元配列を作成します</summary>
            <param name="length">配列の長さ</param>
        </member>
        <member name="M:CamUtil.RO_Collection`1.InnerArray.#ctor(`0[])">
            <summary>指示された配列のインスタンスで１次元配列を作成します。</summary>
            <param name="array">１次元配列</param>
        </member>
        <member name="T:CamUtil.RO_Collection`1.InnerList">
            <summary>読み取り専用配列プロパティの元となる変更可能なList&lt;T&gt;を定義します</summary>
        </member>
        <member name="F:CamUtil.RO_Collection`1.InnerList.AsReadOnly">
            <summary>読み取り専用のコレクション</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.InnerList.#ctor">
            <summary>空のList&lt;T&gt;を作成します</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.InnerList.#ctor(System.Collections.Generic.IList{`0})">
            <summary>指定したコレクションからコピーした要素を格納しList&lt;T&gt;を作成します</summary>
            <param name="list">格納するコレクション</param>
        </member>
        <member name="M:CamUtil.RO_Collection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>新しい読み取り専用リストを作成する唯一のコンストラクタです</summary>
            <param name="array">定義された配列</param>
        </member>
        <member name="M:CamUtil.RO_Collection`1.Exists(System.Predicate{`0})">
            <summary>指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.Find(System.Predicate{`0})">
            <summary>指定された述語によって定義された条件と一致する要素を検索し、全体の中で最もインデックス番号の小さい要素を返します</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.FindAll(System.Predicate{`0})">
            <summary>指定された述語によって定義された条件と一致するすべての要素を取得します</summary>
        </member>
        <member name="M:CamUtil.RO_Collection`1.ToArray">
            <summary>配列化</summary>
        </member>
        <member name="T:CamUtil.RO_ListChar`1">
            <summary>
            読み取り専用の文字インデクサを持つジェネリックスクラスです。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CamUtil.RO_ListChar`1.InnerArray">
            <summary>読み取り専用配列プロパティの元となる変更可能な配列を定義します</summary>
        </member>
        <member name="F:CamUtil.RO_ListChar`1.InnerArray.AsReadOnly">
            <summary>読み取り専用のコレクション</summary>
        </member>
        <member name="P:CamUtil.RO_ListChar`1.InnerArray.Length">
            <summary>配列の長さ</summary>
        </member>
        <member name="P:CamUtil.RO_ListChar`1.InnerArray.Item(System.Char)">
            <summary>変更可能な配列</summary>
        </member>
        <member name="M:CamUtil.RO_ListChar`1.InnerArray.#ctor(System.String)">
            <summary>空の１次元配列を作成します</summary>
            <param name="indexList">使用する文字リスト</param>
        </member>
        <member name="M:CamUtil.RO_ListChar`1.InnerArray.#ctor(`0[],System.String)">
            <summary>指示された配列のインスタンスで１次元配列を作成します。</summary>
            <param name="array">１次元配列</param>
            <param name="indexList">使用する文字リスト</param>
        </member>
        <member name="M:CamUtil.RO_ListChar`1.#ctor(`0[],System.String)">
            <summary>新しい読み取り専用リストを作成する唯一のコンストラクタです</summary>
            <param name="array">定義された配列</param>
            <param name="indexList">使用する文字リスト</param>
        </member>
        <member name="F:CamUtil.RO_ListChar`1.items">
            <summary>配列</summary>
        </member>
        <member name="F:CamUtil.RO_ListChar`1.indexCharList">
            <summary>インデックス</summary>
        </member>
        <member name="P:CamUtil.RO_ListChar`1.Item(System.Char)">
            <summary>配列要素</summary>
        </member>
        <member name="T:CamUtil.FormCommonDialog">
            <summary>
            進行状況を表示する共通のダイアログのクラスです。
            </summary>
        </member>
        <member name="F:CamUtil.FormCommonDialog.method">
            <summary>呼出すメソッド</summary>
        </member>
        <member name="F:CamUtil.FormCommonDialog.errMess">
            <summary>エラーメッセージ</summary>
        </member>
        <member name="M:CamUtil.FormCommonDialog.#ctor(System.String,System.Action{System.Windows.Forms.Label},System.Text.StringBuilder)">
            <summary>
            進行状況を表示する共通のダイアログを作成する（tejun, NCSPEED, NcOutput）
            </summary>
            <param name="caption">表題に表示する文字列</param>
            <param name="method">実行するメソッド</param>
            <param name="p_errMessage">エラーの場合、返すメッセージを書き込む場所</param>
        </member>
        <member name="F:CamUtil.FormCommonDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:CamUtil.FormCommonDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:CamUtil.FormCommonDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:CamUtil.FormInputBox">
            <summary>
            文字を入力するフォームを作成する共通のダイアログのクラスです。
            </summary>
        </member>
        <member name="M:CamUtil.FormInputBox.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary></summary>
            <param name="message">メッセージ</param>
            <param name="title">タイトル</param>
            <param name="textdefault">テキストの初期値</param>
            <param name="width">横幅</param>
            <param name="height">高さ</param>
        </member>
        <member name="M:CamUtil.FormInputBox.ShowDialog">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="F:CamUtil.FormInputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CamUtil.FormInputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CamUtil.FormInputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CamUtil.FormMessageBox">
            <summary>
            スクロールバー付のメッセージを表示する共通のダイアログのクラスです。
            </summary>
        </member>
        <member name="M:CamUtil.FormMessageBox.Show(System.String,System.String)">
            <summary>
            スクロールバー付のメッセージを表示
            </summary>
            <param name="label"></param>
            <param name="text"></param>
        </member>
        <member name="M:CamUtil.FormMessageBox.Show(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            スクロールバー付のメッセージを表示
            </summary>
            <param name="label"></param>
            <param name="text"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:CamUtil.FormMessageBox.Show(System.String,System.String,System.Int32,System.Int32,System.String,System.Single)">
            <summary>
            スクロールバー付のメッセージを表示
            </summary>
            <param name="label"></param>
            <param name="text"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="font">
            <para>フォントのファミリー名</para>
            <para> HGｺﾞｼｯｸM(default)</para>
            <para> Courier New</para>
            <para> Courier New Bold</para>
            <para> Courier New Italic</para>
            <para> Courier New Bold Italic</para>
            <para> Times New Roman</para>
            <para> Times New Roman Bold</para>
            <para> Times New Roman Italic</para>
            <para> Times New Roman Bold Italic</para>
            <para> Arial</para>
            <para> Arial Bold</para>
            <para> Arial Italic</para>
            <para> Arial Bold Italic</para>
            <para> Symbol</para>
            </param>
            <param name="size">フォントサイズ default:9.75pt</param>
        </member>
        <member name="F:CamUtil.FormMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CamUtil.FormMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CamUtil.FormMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CamUtil.LocalHost">
            <summary>
            実行しているＰＣの情報を提供するクラスです。
            </summary>
        </member>
        <member name="P:CamUtil.LocalHost.Name">
            <summary>ＰＣ名</summary>
        </member>
        <member name="P:CamUtil.LocalHost.IPAddress">
            <summary>ＩＰアドレス</summary>
        </member>
        <member name="P:CamUtil.LocalHost.Homedir">
            <summary>ホームディレクトリ</summary>
        </member>
        <member name="P:CamUtil.LocalHost.Tempdir">
            <summary>テンポラリディレクトリ</summary>
        </member>
        <member name="P:CamUtil.LocalHost.Ncdtdir">
            <summary>ＮＣデータの基本ディレクトリ（最後の\なし）</summary>
        </member>
        <member name="M:CamUtil.LocalHost.LocalHostSet">
            <summary>
            ホスト名、ローカルＩＰアドレスの取得
            </summary>
        </member>
        <member name="M:CamUtil.LocalHost.HomeTempDirSet">
            <summary>
            一般に使用するホーム＆ローカルディレクトリ名を設定
            </summary>
        </member>
        <member name="T:CamUtil.Machine">
            <summary>
            すべての加工機の情報を持つクラスです。
            </summary>
        </member>
        <member name="T:CamUtil.Machine.MachID">
            <summary>加工機ＩＤリスト</summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.NULL">
            <summary>未設定の工具</summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.D500">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.DMU200P">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.DMU210P">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.DMU210P2">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.FNC208">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.FNC74">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.KENSYO">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.LineaM">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.MCC2013">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.MCC3016VG">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.MHG_1500">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.V77">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.YBM1218V">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.MachID.YMC430">
            <summary></summary>
        </member>
        <member name="M:CamUtil.Machine.GetmachID(System.String)">
            <summary>加工機名より加工機ＩＤを取得する</summary>
        </member>
        <member name="M:CamUtil.Machine.Milling_5Faces_st(CamUtil.Machine.MachID)">
            <summary>
            ５面加工（工具軸指定）に使用する加工機はtrue
            </summary>
            <param name="machID"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.Machine.Suffix(CamUtil.Machine.MachID)">
            <summary>ＮＣデータ出力名の拡張子</summary>
        </member>
        <member name="M:CamUtil.Machine.BNcForm(CamUtil.Machine.MachID)">
            <summary>加工機よりベースＮＣフォーマットを出力する</summary>
        </member>
        <member name="T:CamUtil.Machine.Machine_Axis_Type">
            <summary>
            軸加工機の軸タイプ
            </summary>
        </member>
        <member name="F:CamUtil.Machine.Machine_Axis_Type.AXIS5_BUHIN">
            <summary>部品加工の軸タイプ</summary>
        </member>
        <member name="F:CamUtil.Machine.Machine_Axis_Type.AXIS5_DMU">
            <summary>ＤＭＵのハイデンハイン仕様の軸タイプ</summary>
        </member>
        <member name="F:CamUtil.Machine.Machine_Axis_Type.AXIS5_VG">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.Machine_Axis_Type.AXIS3">
            <summary>３軸仕様の加工機</summary>
        </member>
        <member name="M:CamUtil.Machine.Axis_Type_st(CamUtil.Machine.MachID)">
            <summary>
            加工機ＩＤより５軸加工機のタイプを出力する
            </summary>
            <param name="machID"></param>
            <returns></returns>
        </member>
        <member name="F:CamUtil.Machine.para6210">
            <summary>G73の戻り量（NcCode/NcMachineとの整合要） add in 2012/06/26</summary>
        </member>
        <member name="F:CamUtil.Machine.para6211">
            <summary>G83のクリアランス量（NcCode/NcMachineとの整合要） add in 2012/06/26</summary>
        </member>
        <member name="P:CamUtil.Machine.MachList">
            <summary>登録された加工機の名称</summary>
        </member>
        <member name="T:CamUtil.Machine.ToolMeasureType">
            <summary>
            工具計測方式
            </summary>
        </member>
        <member name="F:CamUtil.Machine.ToolMeasureType.接触式">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.ToolMeasureType.レーザー">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.ToolMeasureType.画像式">
            <summary></summary>
        </member>
        <member name="T:CamUtil.Machine.DNCName">
            <summary>ＤＮＣ装置の名前</summary>
        </member>
        <member name="F:CamUtil.Machine.DNCName.TEXAS">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.DNCName.AOI">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.DNCName.CIMX">
            <summary></summary>
        </member>
        <member name="F:CamUtil.Machine.DNCName.DM10">
            <summary>LineaM用</summary>
        </member>
        <member name="F:CamUtil.Machine.DNCName.HP">
            <summary>MHG-1500用</summary>
        </member>
        <member name="M:CamUtil.Machine.#cctor">
            <summary>コンストラクタ</summary>
        </member>
        <member name="T:CamUtil.Material">
            <summary>
            材質による加工条件を調整します。
            </summary>
        </member>
        <member name="M:CamUtil.Material.ZgrpgetPC(System.String)">
            <summary>
            ＤＢの材質名よりＤＢの材質グループ名を求める（ＰＣ版）
            </summary>
            <param name="wzais">材質名</param>
            <returns>材質グループ名</returns>
        </member>
        <member name="T:CamUtil.MyExtentions">
            <summary>
            拡張メソッド
            </summary>
        </member>
        <member name="M:CamUtil.MyExtentions.Span(System.String,System.String)">
            <summary>
            指定した文字列内の文字だけを含むこのインスタンスの先頭からの最大の長さをレポートします。
            </summary>
            <param name="source">検索される文字列</param>
            <param name="str">検査する文字列</param>
            <returns>先頭からの長さ</returns>
        </member>
        <member name="M:CamUtil.MyExtentions.Span(System.String,System.String,System.Int32)">
            <summary>
            指定した文字列内の文字だけを含むこのインスタンスの指定位置からの最大の長さをレポートします。
            </summary>
            <param name="source">検索される文字列</param>
            <param name="str">検査する文字列</param>
            <param name="start">検査を開始する文字列の位置</param>
            <returns>指定位置からの長さ</returns>
        </member>
        <member name="M:CamUtil.MyExtentions.SplitCsv(System.String)">
            <summary>
            ＣＳＶファイルの処理のため、カンマで区切られた文字列を部分文字列に分割します。
            先頭とコンマ直後、それと呼応するダブルクォテーションは文字ではなく引用符として扱い、
            またその囲まれた内部のカンマでは区切らない点が Split() と異なります。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.MyExtentions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            指定されたキー セレクター関数の区切り条件に従いシーケンスの要素をグループ化します。
            条件を満たした要素が次のグループの先頭になります。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.MyExtentions.GroupUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            指定されたキー セレクター関数の変化を区切りにシーケンスの要素をグループ化します。
            同一の値でも連続していなければ別のグループとなるところが GroupBy と異なります。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.ServerPC">
            <summary>
            ＰＣサーバ内の情報を提供します。
            </summary>
        </member>
        <member name="F:CamUtil.ServerPC.SvrName">
            <summary>サーバ名</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrN">
            <summary>サーバのフォルダー名（ＮＣデータ）</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrC">
            <summary>サーバのフォルダー名（加工情報データ）</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrM">
            <summary>加工機情報のディレクトリ/usr1/ASDM/CAMCTL/NCSPC/</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrE">
            <summary>加工機マクロのディレクトリ\usr9\ASDM\CAMCTL\NCMEM\</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrS">
            <summary>サーバのフォルダー名（NCSPEEDデータ旧）</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrSedt">
            <summary>サーバのフォルダー名（NCSPEEDデータ計算後）</summary>
        </member>
        <member name="P:CamUtil.ServerPC.SvrFldrSorg">
            <summary>サーバのフォルダー名（NCSPEEDデータ計算前）</summary>
        </member>
        <member name="F:CamUtil.ServerPC.connectionString">
            <summary> 加工情報ＤＢへの接続 </summary>
        </member>
        <member name="F:CamUtil.ServerPC.ExecFldr">
            <summary> 最新の実行ファイルが保存されているフォルダー </summary>
        </member>
        <member name="P:CamUtil.ServerPC.EDT">
            <summary>検証済手順のフォルダー名</summary>
        </member>
        <member name="P:CamUtil.ServerPC.ORG">
            <summary>未検証手順のフォルダー名</summary>
        </member>
        <member name="M:CamUtil.ServerPC.FulNcName(System.String)">
            <summary>
            ＮＣデータ名に絶対パスを付ける
            </summary>
            <param name="ncname">ＮＣデータ名</param>
            <returns>ＮＣデータをＰＣに保存するフルパス名</returns>
        </member>
        <member name="M:CamUtil.ServerPC.TempFolder">
            <summary> ＮＣデータをチェックする場合に使用するPTPの下のフォルダー名 </summary>
        </member>
        <member name="M:CamUtil.ServerPC.TejunName(System.String,System.String)">
            <summary>
            手順書のファイル名からフルパス名を作成する
            </summary>
        </member>
        <member name="M:CamUtil.ServerPC.CreateDirectory(System.String)">
            <summary>
            ＰＴＰ直下の新たなＮＣデータ保存用フォルダーを月度のチェック実施のうえ作成します。
            </summary>
            <param name="outn"></param>
        </member>
        <member name="T:CamUtil.ServerPC.PTPName">
            <summary>
            部品加工でＰＴＰに保存する場合に指定したファイル名の先頭に追加する識別名を制御します。
            </summary>
        </member>
        <member name="F:CamUtil.ServerPC.PTPName.addFileNameLength">
            <summary>識別文字列の長さ in _5AXIS</summary>
        </member>
        <member name="M:CamUtil.ServerPC.PTPName.FileNameTrim(CamUtil.BaseNcForm,System.String)">
            <summary>ＮＣデータの出力ファイル名（ＮＣデータ識別文字列とそれに続く"_"を除いたもの）</summary>
        </member>
        <member name="F:CamUtil.ServerPC.PTPName.name">
            <summary>ＮＣデータ識別文字</summary>
        </member>
        <member name="P:CamUtil.ServerPC.PTPName.NameExist">
            <summary>識別文字の入力有無</summary>
        </member>
        <member name="P:CamUtil.ServerPC.PTPName.AddName">
            <summary>ＮＣデータに追加する識別文字</summary>
        </member>
        <member name="M:CamUtil.ServerPC.PTPName.#ctor(System.Boolean)">
            <summary>
            部品であるかを指定してPTPNameを作成します
            </summary>
            <param name="buhin">部品加工の場合はtrue</param>
        </member>
        <member name="M:CamUtil.ServerPC.PTPName.CheckName(System.String)">
            <summary>
            ファイル名の先頭がＮＣデータ識別文字と一致するかをチェックする
            </summary>
            <param name="fname">ファイル名</param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.StringCAM">
            <summary>
            ＮＣデータの文字列に使用するクラスです。
            </summary>
        </member>
        <member name="F:CamUtil.StringCAM.ABC0">
            <summary>大文字のアルファベット</summary>
        </member>
        <member name="F:CamUtil.StringCAM.ncCHAR0">
            <summary>ＮＣで使用するコード。大文字アルファベットと ;(%\n の３０文字。２番目以降の検出用</summary>
        </member>
        <member name="F:CamUtil.StringCAM.ncCHAR1">
            <summary>ＮＣで使用するコード。大文字アルファベットと ;(%#\n の３１文字。２番目以降の検出用（シーケンス番号後）</summary>
        </member>
        <member name="F:CamUtil.StringCAM.ncCHARS">
            <summary>ＮＣで使用するコード。大文字アルファベットと ;(%#/ の３１文字。最初の検出用</summary>
        </member>
        <member name="F:CamUtil.StringCAM.macroCode">
            <summary>ＮＣのマクロ文のリスト</summary>
        </member>
        <member name="F:CamUtil.StringCAM.functionList">
            <summary>ＮＣのマクロ文で、英文字で表される演算子と関数のリスト</summary>
        </member>
        <member name="M:CamUtil.StringCAM.GetNcIndexList(System.String)">
            <summary>
            ＮＣデータに含まれるＮＣコードの位置リストを出力する。最終データにはＮＣデータの文字数が入る。
            </summary>
            <param name="ncLine"></param>
            <returns>ＮＣコードの位置リスト。cf. "N1 G01 X100;"   { {0, 3}, {3, 7}, {7, 11}, {11, 12} }</returns>
        </member>
        <member name="M:CamUtil.StringCAM.SplitNcCode(System.String)">
            <summary>
            ＮＣコード単位に分部分文字列を格納する文字列配列を返す。
            </summary>
            <param name="ncLine"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.StringCAM.GetNcIndex(System.String,System.Char)">
            <summary>
            指定したＮＣコードの開始位置と終了位置＋１の２つの整数値のリストを返す。ＮＣコードが存在しない場合は長さ０の配列を返す
            </summary>
            <param name="ncLine"></param>
            <param name="ncc"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.StringCAM.GetNcIndex(System.String,System.Char[])">
            <summary>
            複数のＮＣコードの最初の開始位置と最後の終了位置＋１の２つの整数値を返す。連続不連続は問わない。ＮＣコードが存在しない場合はnullを返す。
            </summary>
            <param name="ncLine"></param>
            <param name="ncc"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.StringCAM.GetNcCode(System.String,System.Char)">
            <summary>
            ＮＣデータから指定のＮＣコードのリストを取り出す。指定のＮＣコードがない場合はnullを返す
            </summary>
            <param name="ncLine"></param>
            <param name="ncc"></param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.ToolSetData">
            <summary>
            ツールセットＣＡＭの情報を管理します。
            </summary>
        </member>
        <member name="T:CamUtil.ToolSetData.TSetTemp">
            <summary>
            非標準ツールセットの作成用のテーブル 2008/11/14
            </summary>
        </member>
        <member name="M:CamUtil.ToolSetData.TSetCAM_List(System.Double,System.Double,CamUtil.BaseNcForm)">
            <summary>
            エンドミルの直径とコーナー半径より適合するツールセットＣＡＭ名を抽出する
            </summary>
            <param name="diam"></param>
            <param name="crad"></param>
            <param name="bnf">加工対象区分（GENERAL, 5AXIS, GRAPHITE）</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.ToolSetData.TSetCAM_List(System.String,CamUtil.BaseNcForm)">
            <summary>
            ケーラム工具名より適合するツールセットＣＡＭ名を抽出する（TSetCAM_List）
            </summary>
            <param name="tnameUNIX"></param>
            <param name="bnf">加工対象区分（GENERAL, 5AXIS, GRAPHITE）</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.ToolSetData.TSetCAM_List(System.String,System.String,System.Double,CamUtil.BaseNcForm)">
            <summary>
            刃具精度管理名とホルダー名と突出し量より適合するツールセットＣＡＭ名を抽出する
            </summary>
            <param name="tnam"></param>
            <param name="hnam"></param>
            <param name="tsuk"></param>
            <param name="bnf">加工対象区分（GENERAL, 5AXIS, GRAPHITE）</param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.ToolSetData.TSetCAM">
            <summary>
            ツールセットＣＡＭ情報[不変]
            </summary>
        </member>
        <member name="F:CamUtil.ToolSetData.TSetCAM.tscamName">
            <summary>ツールセットＣＡＭの名前</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.TSetCAM.dRowCAM">
            <summary>ツールセットＣＡＭのデータ</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.TSetCAM.coolant">
            <summary>クーラントのコード</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.RadRevision">
            <summary>
            工具半径補正量
            （M20,M24,PTのタップとスプルーロックに使用）ADD in 2007/11/03
            （刃具倒れ式の数値にも使用）2009/03 ＶＧより
            </summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.LenRevision">
            <summary>工具長さ補正量（測定再加工用） ADD in 2009/02/02</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.Accuracy">
            <summary>精度区分。加工モードの選択に使用する（ARA,CHU,SIA1,SIA2など）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.LifeMaxBase">
            <summary>工具寿命のベースの値</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.Tol_L_After">
            <summary>工具長の磨耗量の最大値</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.Tol_D_After">
            <summary>工具径の磨耗量の最大値</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.Gensoku">
            <summary>加工の減速比率(add 2014/12/11)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.TSetCAM.KouteiType">
            <summary>工程区分【ＸＭＬに代入される】Add 2009/05/15 </summary>
        </member>
        <member name="M:CamUtil.ToolSetData.TSetCAM.#ctor(System.String)">
            <summary>
            ツールセットＣＡＭ名から作成するコンストラクタ（ツールセット情報は仮）
            </summary>
            <param name="tsCAM">ツールセットＣＡＭ名</param>
        </member>
        <member name="T:CamUtil.ToolSetData.ToolSet">
            <summary>
            ツールセットの情報[不変]
            </summary>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.Clone">
            <summary>クローン</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.ToolSet.tset_name">
            <summary>ツールセット名</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.ToolSet.ID">
            <summary>ツールセットＩＤ（非標準の場合は"0500"以下）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.TsetBaseName">
            <summary>元になったツールセット名（フリーのツールセットの場合）</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.ToolSet.m_tset_base_name">
            <summary>元になったツールセット名（フリーのツールセットの場合）</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.ToutMatch(System.Double)">
            <summary>突出し量の整合（切り上げて大小比較）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ToutLength">
            <summary>突出し量</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.ToolSet.m_tout_length">
            <summary>突出し量</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ToutHosei">
            <summary>突出し補正量</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.TolLmax">
            <summary>突出し量許容誤差</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.TolDmax">
            <summary>刃具径許容誤差</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.TolDmin">
            <summary>刃具径許容誤差</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.FixedNumber">
            <summary>工具番号固定（in machine_magazine）限定</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ToolName">
            <summary>刃具精度管理工具名</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.QuarityDiam_p">
            <summary>工具の径精度（＋側）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.QuarityDiam_m">
            <summary>工具の径精度（－側）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ToolFormName">
            <summary>工具形状名</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ToolFormType">
            <summary>工具形状タイプ</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.MeasShift">
            <summary>工具長計測時シフト固定値</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.CutterTypeCaelum">
            <summary>ケーラム工具種類名</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.CondType">
            <summary>切削条件（寿命含む）調整のタイプ</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.CutterTypeName">
            <summary>工具表に表示する工具種類の名称(add 2010/01/21)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Probe">
            <summary>測定子の場合true(add 2013/04/10)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.M0304">
            <summary>工具回転方向 M04:reverse (add 2014/12/09)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.MeasType">
            <summary>工具計測タイプ</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.MeasTypeDMG">
            <summary>工具計測タイプ（DMG）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.MeasType5AXIS">
            <summary>工具計測タイプ（部品加工機）(add 2014/12/09)</summary>
            <remarks>
            １．「刃具形状タイプ」が RMIL(ラットエンドミル) の場合、「部品の径測定識別記号」は 'E' になる
            		ただし、ＤＢの「径測定識別記号」は 'B' でなければならない
            ２．「刃具形状タイプ」が EMIL(フラットエンドミル)、FMIL(フルバック) の場合、「部品の径測定識別記号」は 'F' になる
            		ただし、ＤＢの「径測定識別記号」は 'E' あるいは 'F' でなければならない
            ３．「刃具形状タイプ」が MEN(面取り)、CTAP(テーパタップ) の場合、「部品の径測定識別記号」は 'V' になる
            		ただし、ＤＢの「径測定識別記号」は 'Q' でなければならない
            ４．その他の「刃具形状タイプ」の場合はＤＢの「径測定識別記号」がそのまま「部品の径測定識別記号」になる
            		ただし、ＤＢの「径測定識別記号」は 'E' あるいは 'F' であってはならない。
            </remarks>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Diam">
            <summary>工具直径</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Crad">
            <summary>コーナー半径</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Diam_in">
            <summary>工具内径（ＲＣテーパタップの先端径に使用）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Hacho">
            <summary>刃長（ADD in 2007/11/04）</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Diam_shank">
            <summary>シャンク径(add 2010/09/03)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Torque">
            <summary>最大許容トルク(add 2015/02/03)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderName">
            <summary>ホルダー名</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderLength">
            <summary>ホルダー長さ</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.TsetLength">
            <summary>ツールセット全長</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderDiameter">
            <summary>ホルダー径</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderTypeName">
            <summary>工具表に表示するホルダーの名称(add 2010/01/21)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderShankMin">
            <summary>対応する最小シャンク径(add 2010/09/03)</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.HolderShankMax">
            <summary>対応する最大シャンク径(add 2010/09/03)</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.#ctor(System.String)">
            <summary>
            標準の工具情報を作成する
            </summary>
            <param name="tsname"></param>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.#ctor(System.String,System.Double)">
            <summary>
            非標準の工具情報を作成する
            </summary>
            <param name="tsname"></param>
            <param name="ttsk"></param>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.Ex_diam_Index">
            <summary>加工機にわたす（インデックスファイル用）工具径を出力する（diam_inが存在する時はdiam_inとなる）</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.Ex_diam_Dynavista(System.String[])">
            <summary>Dynavista内部のごまかし工具径を調整する</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.DCode">
            <summary>径測定識別記号と計測直径（Ｄコード）を作成する</summary>
        </member>
        <member name="P:CamUtil.ToolSetData.ToolSet.ICode">
            <summary>接触式の工具長計測のシフトコード（Ｉコード）を作成する</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.Shift_r(CamUtil.Machine.ToolMeasureType)">
            <summary>
            工具長計測のシフト値を出力する
            </summary>
            <param name="mType">工具測定方式</param>
            <returns>工具長計測のシフト値</returns>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.Shift_l">
            <summary>
            工具径計測の工具軸方向シフト値を出力する
            </summary>
            <returns>工具径計測のシフト値</returns>
        </member>
        <member name="M:CamUtil.ToolSetData.ToolSet.NonStdIdSet(System.Double,System.Collections.Generic.List{System.Int32})">
            <summary>
            非標準のツールセットを流用あるいは作成する
            </summary>
            <param name="length">ツールセット全長。事前に丸めておくこと</param>
            <param name="exceptID">流用を除外するＩＤのリスト</param>
        </member>
        <member name="T:CamUtil.ToolSetData.Coolant">
            <summary>
            クーラント情報
            </summary>
        </member>
        <member name="T:CamUtil.ToolSetData.Coolant.ID">
            <summary>
            クーラント区分ＩＤ
            </summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.ID.waterOut">
            <summary>クーラント　水油、外部</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.ID.waterIn">
            <summary>クーラント　水油、内部</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.ID.airOut">
            <summary>クーラント　エア、外部</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.ID.airIn">
            <summary>クーラント　エア、内部</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.ID.nonCool">
            <summary>クーラント　無し</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.Coolant.TexasCoolantNo(CamUtil.ToolSetData.Coolant.ID)">
            <summary>
            テキサス出力クーラントナンバー
            </summary>
            <param name="coolID"></param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.ToolSetData.Coolant.Message(CamUtil.ToolSetData.Coolant.ID)">
            <summary>
            各クーラントの区分名称
            </summary>
            <param name="coolID"></param>
            <returns></returns>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.id">
            <summary>クーラント機能ID（"WATER_OUT", "WATER_IN", ....）</summary>
        </member>
        <member name="F:CamUtil.ToolSetData.Coolant.name">
            <summary>クーラント機能名（"WATER_OUT", "WATER_IN", ....）</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.Coolant.#ctor(System.String)">
            <summary>唯一のコンストラクタ</summary>
        </member>
        <member name="M:CamUtil.ToolSetData.Coolant.CoolCode_BuhinNC">
            <summary>クーラントＩＤ（部品加工のＮＣデータ用）</summary>
        </member>
        <member name="T:CamUtil.NativeMethods">
            <summary>
            NativeMethods（アンマネージまとめるクラス）
            </summary>
        </member>
        <member name="M:CamUtil.NativeMethods.WNetGetUniversalName(System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            WNetGetUniversalNameをインポートする
            </summary>
            <param name="lpLocalPath">ネットワーク資源のパス</param>
            <param name="dwInfoLevel">情報のレベル</param>
            <param name="lpBuffer">名前バッファ</param>
            <param name="lpBufferSize">バッファのサイズ</param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.UniversalName">
            <summary>
            ネットワークドライブ名をUNC（Universal Naming Convention）名に変換する
            </summary>
        </member>
        <member name="M:CamUtil.UniversalName.GetUniversalName(System.String)">
            <summary>
            UNC変換ロジック本体
            </summary>
            <param name="path_src"></param>
            <returns></returns>
        </member>
        <member name="T:CamUtil.LCode.Gcode">
            <summary>
            Ｇコードを保存するストラクチャです。
            </summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.unt0">
            <summary
            >sg[][,]に保存するＧコードの単位。
            これ以下の小数があってもsgと一致しないのでエラーとなる。このため、ＮＣからの変換もpostの単位ではなくこれを使用する 2019/03/27
            </summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.GGRPNUM">
            <summary>Ｇコードグループの数</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.ggroup">
            <summary>Ｇグループの初期状態。</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.Ncgset(System.Double,System.Byte@)">
            <summary>Ｇコード番号より、Ｇコードグループ番号と処理内容を出力する</summary>
            <param name="ignum">Ｇコードの値</param>
            <param name="group">Ｇコードグループ番号</param>
            <returns>Ｇコードの処理区分  0:正常に処理 1:Ｇコードを無視する 2:その行を無視する 3:処理不能エラー</returns>
        </member>
        <member name="F:CamUtil.LCode.Gcode.sg">
            <summary>
            Ｇコードグループのメンバーとその処理を決定する
            Gコードのグループ番号、処理区分、とコード番号
            処理区分＝0:正常に処理 1:Ｇコードを無視する 2:その行を無視する 3:処理不能エラー
            </summary>
        </member>
        <member name="P:CamUtil.LCode.Gcode.Gst">
            <summary>Ｇコード設定の有無</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.item">
            <summary>Ｇコード番号。Post.sdgt[7]倍となる</summary>
        </member>
        <member name="P:CamUtil.LCode.Gcode.MacroCall">
            <summary>Ｇコードマクロ呼出しの場合はtrue</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.gsw">
            <summary>Ｇコードの処理区分　0:正常に処理 1:Ｇコードを無視する 2:その行を無視する 3:処理不能エラー</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.group">
            <summary>Ｇコードのグループ番号</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.macName">
            <summary>Ｇコードマクロのプログラム番号（G100の場合は9010）</summary>
        </member>
        <member name="F:CamUtil.LCode.Gcode.macCode">
            <summary>ＧコードマクロのＧコード番号（G100の場合は100）未使用</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.#ctor(System.Double,System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{System.Int32[]})">
            <summary>Ｇコードの読み替え、処理区分とグループに対応するコンストラクタ</summary>
            <param name="value">Ｇコード設定値</param>
            <param name="yomikae">Ｇコード読替えリスト</param>
            <param name="gCodeMacro">
            Ｇコード呼び出しマクロのリスト。Ｇコード、マクロ番号と呼出し方法のリストを与える
            [0]:Ｇコード番号(etc.100)、[1]:マクロ番号(etc.9010)、[2]:0=単純呼出し(G65) 1=モーダル呼出し移動指令(G66) 2:モーダル呼出し毎ブロック(G66.1)
            </param>
        </member>
        <member name="M:CamUtil.LCode.Gcode.#ctor(System.Double)">
            <summary>Ｇコード番号でＧコードを作成します</summary>
            <param name="value">Ｇコード設定値</param>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToDouble">
            <summary>Ｇコードを実数化して出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToInt_OK">
            <summary>整数化の可否を判断します</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToInt">
            <summary>整数値のＧコードを出力します。小数点付になる場合はエラーです</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.Equals(System.Double)">
            <summary>実数Ｇコードと比較します</summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.Equals(CamUtil.LCode.Gcode)">
            <summary>このインスタンスと指定した Gcode オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToString">
            <summary></summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToString(System.String)">
            <summary></summary>
        </member>
        <member name="M:CamUtil.LCode.Gcode.ToStringAuto">
            <summary>
            Ｇコードを元のＮＣデータに復元して出力する
            </summary>
            <returns></returns>
        </member>
        <member name="T:CamUtil.LCode.LCode">
            <summary>
            NcNextLine(), passLength.PassLength() を１つのクラスにまとめる。まだ未使用
            </summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.ncForm">
            <summary>ＮＣデータのフォーマット</summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.post">
            <summary>入力ＮＣデータの座標値、桁数</summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.apz">
            <summary>工具ごとのクリアランス高さ</summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.commentOutput">
            <summary>コメントを出力する場合は true、出力しない場合は false。</summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.regular">
            <summary>既定のフォーマットに変換されたＮＣデータの場合は true、ＣＡＭから出力されたままでカスタムマクロがG65からG66に変換される前のＮＣデータの場合は false。</summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.passKeisan">
            <summary></summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.passLength">
            <summary></summary>
        </member>
        <member name="F:CamUtil.LCode.LCode.outCode">
            <summary></summary>
        </member>
        <member name="M:CamUtil.LCode.LCode.#ctor(System.Double[],CamUtil.BaseNcForm,CamUtil.LCode.NcDigit,System.Boolean,System.Boolean)">
            <summary>
            NcLineCode, NcLineCode.NcDist を計算する LCode を作成する。加工長、加工時間は計算しない
            </summary>
            <param name="p_apz">開始のＺ座標値。工具ごとに指定します</param>
            <param name="baseForm">ＮＣの基本フォーマット名（"GENERAL" or "_5AXIS"）</param>
            <param name="p_post">ＣＡＭポストの小数点桁数</param>
            <param name="p_commentOutput">出力時にＮＣデータとともにコメントも出力する場合は true</param>
            <param name="p_regular">既定のフォーマットに変換されたＮＣデータの場合は true</param>
        </member>
        <member name="M:CamUtil.LCode.LCode.#ctor(System.Double[],CamUtil.BaseNcForm,CamUtil.LCode.NcDigit,System.Boolean,System.Boolean,System.Double,CamUtil.Angle3[])">
            <summary>
            NcLineCode, NcLineCode.NcDist を計算する LCode を作成する。加工長、加工時間も計算する
            </summary>
            <param name="p_apz">開始のＺ座標値。工具ごとに指定します</param>
            <param name="baseForm">ＮＣの基本フォーマット名（"GENERAL" or "_5AXIS"）</param>
            <param name="p_post">ＣＡＭポストの小数点桁数</param>
            <param name="p_commentOutput">出力時にＮＣデータとともにコメントも出力する場合は true</param>
            <param name="p_regular">既定のフォーマットに変換されたＮＣデータの場合は true</param>
            <param name="feedrate">ＮＣデータ内の切削送り速度。加工時の送りではないので注意。加工時間の計算不要の場合はnullで可</param>
            <param name="eulerXYZ">座標回転</param>
        </member>
        <member name="M:CamUtil.LCode.LCode.NextLine(System.String)">
            <summary>
            新たな１行のＮＣデータで NcLineCode, NcLineCode.NcDist を更新する
            </summary>
            <param name="readline">ＮＣデータ１行の文字列</param>
        </member>
        <member name="T:CamUtil.LCode.INcConvert">
            <summary>
            StreamNcR2で使用するＮＣデータ変換のインターフェースです。前後のＮＣデータを保存するプロパティとＮＣデータを変換するメソッドを公開します。
            </summary>
        </member>
        <member name="P:CamUtil.LCode.INcConvert.NcQue">
            <summary>ＮＣデータが保存されているバッファー</summary>
        </member>
        <member name="M:CamUtil.LCode.INcConvert.ConvExec">
            <summary>
            ＮＣデータを変換するメソッドです
            </summary>
            <returns>複数行のＮＣデータを出力する情報を返します</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode">
            <summary>
            簡易なＮＣデータ１行実行時の工具位置・モード・加工長などの情報を作成します。サブプログラム解析、マクロ変数には対応しません。
            </summary>
            <remarks>
            最初にコンストラクタを用いて初期化します
            	例：NcLineCode ncCode = new NcLineCode(new double[] { 100.0 }, CamUtil.BaseNcForm.GENERAL)
            次にNextLineで指定されたＮＣデータで順次更新します。ncCode自体は変更されない。
            	例：NcLineCode ncCode2 = ncCode.NextLine(sr.ReadLine());
            CamUtil.LCode.NcQueue を用いるとキューに保存された NcLineCode により前後の参照が可能になります
            Ｇコードと固定サイクル、カスタムマクロのモーダルは処理していますが、サブプログラムは処理しません。
            xyzsf に保存される回転数、送り速度と工具位置はこのＮＣデータ行を実行した最終の情報となり穴底ではありません。
            このため、固定サイクル・カスタムマクロの穴底の工具位置はそれぞれのモーダル値にて確認します。
            </remarks>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.RF_5AXIS">
            <summary>NcForm.Name == "5AXIS"で早送りとみなす切削送り速度=80000mm/min</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.MACP">
            <summary>ＮＣのマクロで使用する引数コード。GLNO は使用できない。</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Keta(System.Char)">
            <summary>出力時の最小桁数</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.GeneralDigit">
            <summary>NcLineCode 内のデータが保存されている数値の桁数情報</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.XyzDigit">
            <summary>ＮＣデータのＸＹＺ座標値の整数化桁数</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.gels_Data">
            <summary>固定サイクル、マクロ、モーダルを除く一般のＧコード</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcRateSF(System.String,System.Char,System.Double)">
            <summary>
            ＮＣデータの指定コードの数値に係数をかけます。小数点の有無は元のデータに合わせます。
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（一文字）</param>
            <param name="rate">係数</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcRateSF(System.String,System.Char,System.Func{System.Double,System.Double})">
            <summary>
            ＮＣデータの指定コードの数値を元に新しい値を計算します。小数点の有無は元のデータに合わせます。
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（一文字）</param>
            <param name="rset">新ＮＣデータ値の変換式</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcRateSF(System.String,System.Char,System.Func{System.Double,System.Double},System.Boolean)">
            <summary>
            ＮＣデータの指定コードの数値を元に新しい値を計算します。小数点の有無はinteger に従います。
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（一文字）</param>
            <param name="rset">新ＮＣデータ値の変換式</param>
            <param name="integer">整数で出力する場合true</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcSetValue(System.String,System.Char,System.String)">
            <summary>
            ＮＣデータの指定コードの文字列を指定の文字列で入れ替えます
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード</param>
            <param name="text">入れ替える文字列</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDelChar(System.String,System.Char)">
            <summary>
            ＮＣデータの指定コードを削除します
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（一文字）</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcInsertChar(System.String,System.Char,System.String,System.Boolean)">
            <summary>
            ＮＣデータの指定コードの前あるいは後に文字列を追加挿入します
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（一文字）</param>
            <param name="text">追加挿入する文字列</param>
            <param name="ins">指定コードの前に挿入する場合はtrue、後ろに追加する場合はfalse。</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcInsertChar(System.String,System.Char[],System.String,System.Boolean)">
            <summary>
            ＮＣデータの文字列で指定された複数のコードの前後に文字列を追加挿入します。
            前に挿入する場合は最初に見つかったコード、後ろに追加する場合は最後に見つかったコードが対象となります。
            </summary>
            <param name="sline">ＮＣデータの一行</param>
            <param name="ncc">ＮＣコード（複数）</param>
            <param name="text">追加挿入する文字列</param>
            <param name="ins">指定コードの前に挿入する場合はtrue、後ろに追加する場合はfalse。</param>
            <returns>１行のＮＣデータ出力</returns>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.comma_Data">
            <summary>コメントの開始終了キー（0;ファナック、1:ハイデンハイン）</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.G_Fix(System.Int32)">
            <summary>Ｇコードグループ09（固定サイクル）であれば true、そうでなければ false。</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.G_Else(System.Int32)">
            <summary>主要Ｇコードグループ（01, 02, 03, 05, 07, 09, 12）とG100, G65 以外のエラーとしないＧコード</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CommStEnd">
            <summary>コメントの開始キー（１文字目必須）と終了キー（２文字目任意）の１文字か２文字</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.ncForm">
            <summary>ＮＣデータのフォーマット</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.post">
            <summary>入力ＮＣデータの座標値、桁数（すべて同一のpostを参照するためナロ－コピーで可）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Start">
            <summary>現在のＮＣデータの状況（-1:有意データ前、0:有意データ（最初の%以後）、1:M02,M30以降）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.apz">
            <summary>工具ごとのクリアランス高さ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_g100">
            <summary>この行でのモード指定の有無（G100）	注意：b_g6はtrueにはならない、g6は67である</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_g1">
            <summary>この行でのモード指定の有無（G00,G01,G02,G03,G33）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_g4">
            <summary>この行でのモード指定の有無（G40,G41,G42）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_g6">
            <summary>この行でのモード指定の有無（カクタムマクロコード）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_g8">
            <summary>この行でのモード指定の有無（固定サイクルコード）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.B_p0006">
            <summary>この行でのM98P6の指定</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G1">
            <summary>Ｇコードグループ01 移動モード(G00,G01,G02,G03,G33)</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G2">
            <summary>Ｇコードグループ02 平面モード(G17,G18,G19)</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G4">
            <summary>Ｇコードグループ07 オフセットモード(G40,G41,G42)</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G5">
            <summary>Ｇコードグループ05 送り速度モード（毎分G94/毎回転G95）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G6">
            <summary>Ｇコードグループ12 カクタムマクロコード（G66,G67）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G8">
            <summary>Ｇコードグループ09 固定サイクルコード（G70～G89）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G9">
            <summary>Ｇコードグループ03 絶対相対モード(ABSG90,INCG91)</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NumList">
            <summary>ＮＣデータ１行のＮＣコードリスト</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.m_numList">
            <summary>ＮＣデータ１行のＮＣコードリストnumListを設定するフィールド</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Tcnt">
            <summary>工具連番（０から）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.LnumN">
            <summary>ＮＣデータ単位の行番号（１から）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.LnumT">
            <summary>工具単位の行番号（１から）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xyzsf">
            <summary>移動後の位置（X,Y,Z,A,B,C）と（S,F）の値</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G8p">
            <summary>固定サイクルのモード情報</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.G6p">
            <summary>カスタムマクロのモード情報</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.SubPro">
            <summary>サブルーチンコールがある場合そのプログラム番号</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.M02">
            <summary>終了コードM02,M30がある場合 true</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcLine">
            <summary>ＮＣデータのコメントを除く入力行</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.OutLine">
            <summary>出力する複数のＮＣデータ行</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.m_commentOutput">
            <summary>コメントを出力する場合は true、出力しない場合は false。</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.regular">
            <summary>既定のフォーマットに変換されたＮＣデータの場合は true、ＣＡＭから出力されたままでカスタムマクロがG65からG66に変換される前のＮＣデータの場合は false。</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.#ctor(System.Double[],CamUtil.BaseNcForm,CamUtil.LCode.NcDigit,System.Boolean,System.Boolean)">
            <summary>
            開始行を作成します
            </summary>
            <param name="p_apz">開始のＺ座標値。工具ごとに指定します</param>
            <param name="baseForm">ＮＣの基本フォーマット名（"GENERAL" or "_5AXIS"）</param>
            <param name="postInput">入力側のＮＣデータ（ＣＡＭポストなど）の小数点桁数。入力側がＰＴＰの場合はNcDigit.GeneralDigit を用いる</param>
            <param name="p_commentOutput">出力時にＮＣデータとともにコメントも出力する場合は true</param>
            <param name="p_regular">既定のフォーマットに変換されたＮＣデータの場合は true</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Clone">
            <summary>
            ディープコピーによりクローンを作成します。
            ディープコピーコンストラクタより約３０％コストが低いためこちらを使用します。
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.#ctor(CamUtil.LCode.NcLineCode)">
            <summary>
            ディープコピーを作成します
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NextLine(System.String)">
            <summary>
            ＣＡＭ出力ＮＣデータを解析し、前行の情報を最新情報に更新する。実行時には前行の情報が入っていること。
            もし前後のバッファーNcQueueを用いる場合はNcQueueのNextLineを用いるとバッファリングも同時に実行する
            </summary>
            <param name="readline">次行のＮＣデータ</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.B_26(System.Char)">
            <summary>
            指定コード（Ａ－Ｚ）が行内で存在するかどうかを判断します
            </summary>
            <param name="cc">存在を判断するＮＣコード</param>
            <returns>存在する場合は true</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.ExistsG(System.Double)">
            <summary>
            指定したＧコードが存在するかどうかを判断します。
            </summary>
            <param name="gcode">存在を判断するＧコード</param>
            <returns>存在すれば true</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Code(System.Char)">
            <summary>
            ＮＣデータ１行に定義されたＮＣコードの情報を出力します
            </summary>
            <param name="ncchar">情報を得るコード</param>
            <returns>コードの情報。ない場合はnum_nullを返します</returns>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.XYZ">
            <summary>ＮＣデータ内のＸＹＺの座標値をベクトルで出力します。すべてが設定されていない場合はエラーとなります。</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.IJK">
            <summary>ＮＣデータ内のＩＪＫの座標値をベクトルで出力します。設定されていないコードは0.0となります。</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Start_End_Code(System.String)">
            <summary>
            ＮＣデータの開始終了行の判定をします
            </summary>
            <param name="txt">ＮＣデータ</param>
            <returns>開始あるいは終了行（'%'が１文字目）である場合 true。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.ResetLine">
            <summary>
            初期化。ＮＣデータ１行ごとに実行
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.ResetTool">
            <summary>
            工具交換時の初期化。G100時にコールされる
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Set_Line(System.String)">
            <summary>
            NcLine, OutLineの作成
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Equals(CamUtil.LCode.NcLineCode)">
            <summary>このインスタンスと指定した NcLineCode オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が CamUtil.NcLineCode のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.NcDist">
            <summary>ＮＣデータの移動距離、加工時間と存在範囲の情報をＮＣデータを元に積算し保存します</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.RapidFeed">
            <summary>早送り速度のＸＭＬ標準値</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.op_Equality(CamUtil.LCode.NcLineCode.NcDist,CamUtil.LCode.NcLineCode.NcDist)">
            <summary>３Ｄベクトルの==演算子</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.op_Inequality(CamUtil.LCode.NcLineCode.NcDist,CamUtil.LCode.NcLineCode.NcDist)">
            <summary>３Ｄベクトルの!=演算子</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.G00">
            <summary>加工長mm（G00）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.G01">
            <summary>加工長mm（G01.G02,G03）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_G00X">
            <summary>加工長mm（G00, XY平面移動）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_G00Z">
            <summary>加工長mm（G00, Z軸移動）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_G01">
            <summary>加工長mm（G01.G02,G03）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.Max">
            <summary>最大ＸＹＺ位置</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.MaxAdd(System.Nullable{CamUtil.Vector3})">
            <summary>最大ＸＹＺ位置を更新します</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.Min">
            <summary>最小ＸＹＺ位置</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.MinAdd(System.Nullable{CamUtil.Vector3})">
            <summary>最小ＸＹＺ位置を更新します</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.CuttingTime">
            <summary>切削送りの加工時間(min)</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NcDist.FeedTime">
            <summary>直線円弧補間時の加工時間(min)</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.NonFeedTime">
            <summary>標準早送り速度での位置決めと滞留時間(min)</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.NonFeedTime(System.Double,System.Double)">
            <summary>指定早送り速度での位置決めと滞留時間(min)</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.frate">
            <summary>切削送り速度(mm/min)。切削送り加工時間の計算不要の場合はnullとします</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_TimC">
            <summary>切削送り加工時間(min)</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_TimN">
            <summary>直線円弧補間時の非切削加工時間(min)。切削送り速度でない加工時間です。</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.m_dwell">
            <summary>滞留時間(min)</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.rotAxis">
            <summary>傾斜加工の情報リスト</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.depth">
            <summary>最大孔深さ（型上面～孔底の距離）現在、算出のみでその値は未使用です</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NcDist.keishaNo">
            <summary>傾斜角の連番（初期値０）</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.#ctor(System.Nullable{System.Double},CamUtil.Angle3[])">
            <summary>
            ＮＣデータによって積算するための初期値で作成します
            </summary>
            <param name="feedrate">ＮＣデータ内の切削送り速度。加工時の送りではないので注意。加工時間の計算不要の場合はnullで可</param>
            <param name="eulerXYZ"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.#ctor(System.Double,CamUtil.CamNcD.XmlNavi.Tool,System.Double)">
            <summary>
            ＸＭＬ情報からの結果を作成します（ADD in 2015/01/20）
            </summary>
            <param name="feedrate">ＮＣデータ内の切削送り速度。加工時の送りではないので注意</param>
            <param name="xml">ＸＭＬデータ</param>
            <param name="rapx">早送り速度ＸＹ</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.Add(CamUtil.LCode.NcLineCode.NcDist)">
            <summary>
            他の NcDist 情報で加工長、移動範囲、加工時間を追加更新します
            </summary>
            <param name="nd"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.AddDwell(System.Double)">
            <summary>
            滞留時間（秒）を積算します。ガンドリルの孔加工の穴底での停止時間などに用います。
            </summary>
            <param name="dwell">停止時間（秒）</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.ShiftZ(System.Double)">
            <summary>
            計算したＮＣデータの存在範囲データをＺ方向にシフトします。工具先端補正などに用います。
            </summary>
            <param name="tvec">Ｚシフト量</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.PassLength(CamUtil.LCode.NcLineCode)">
            <summary>
            ＮＣデータ１行の情報 NcLineCode を用いて移動距離、移動範囲、加工時間などを積算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.FixCycleSet(CamUtil.LCode.NcLineCode)">
            <summary>
            固定サイクルの積算値を計算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.UserMacroSet65(CamUtil.LCode.NcLineCode)">
            <summary>
            G65マクロの積算値を計算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.UserMacroSet66(CamUtil.LCode.NcLineCode)">
            <summary>
            G66マクロの積算値を計算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.MinMax(CamUtil.Vector3)">
            <summary>
            新たな座標値で最大最小の座標値を更新します
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.AddG01(System.Double,System.Nullable{System.Double})">
            <summary>
            送り速度を指定して直線円弧補間の加工長と加工時間を積算します
            </summary>
            <param name="kyori">加工長</param>
            <param name="feed2">送り速度</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.AddG01(System.Double,System.Nullable{System.Double},System.Boolean)">
            <summary>
            送り速度と切削加工か否かを指定して直線円弧補間の加工長と加工時間を積算します
            </summary>
            <param name="kyori">加工長</param>
            <param name="feed2">送り速度</param>
            <param name="cutting">切削加工の場合はtrue</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.Equals(System.Object)">
            <summary>このインスタンスと指定した NcDist オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NcDist.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Center">
            <summary>
            円弧補間NcLineCodeの工具軌跡回転中心点を計算します
            </summary>
            <returns>円弧補間の工具軌跡回転中心座標値</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Radius">
            <summary>
            円弧補間NcLineCodeの工具軌跡半径を計算します
            </summary>
            <returns>円弧補間の工具軌跡半径</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Angle(CamUtil.Vector3)">
            <summary>
            ヘリカル加工を含む円弧補間NcLineCodeの回転角度を計算します（反時計回りG03を正とします）
            </summary>
            <param name="cntr">回転中心座標値</param>
            <returns>円弧補間の回転角度（単位：radian）</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.NumCode">
            <summary>
            ＮＣコード１件の情報を表します。小数点以下桁数はdigitList固定です。[不変]
            </summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NumCode.ncChar">
            <summary>ＮＣのコード文字</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NumCode.macVNo">
            <summary>マクロ変数への代入文（ncchar=='#'）の場合、その変数番号。その他の場合は０</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NumCode.decim">
            <summary>入力ＮＣデータが小数点付きの場合は true</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NumCode.S">
            <summary>ＮＣコードの数値部分のそのままの文字列。数値部分がない場合は空の文字列</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NumCode.strData">
            <summary>ＮＣのコード全体の文字列</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.NumCode.dblData">
            <summary>ＮＣのコードの数値（実数）</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NumCode.ToInt_OK">
            <summary>ＮＣのコード整数化可否</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.NumCode.L">
            <summary>ＮＣのコードの整数化した数値を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NumCode.Clone">
            <summary>ディープコピー（==ナローコピー）を作成します</summary>
            <returns>コピー</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NumCode.#ctor(System.Char,System.String,CamUtil.LCode.NcDigit.NcDigits)">
            <summary>
            ＮＣのコードとテキストから作成します。単一文字の %, ; や マクロ代入文 # も処理します
            </summary>
            <param name="p_ncchar">ＮＣコードの文字</param>
            <param name="ntxt">ＮＣコードの数値文字列</param>
            <param name="posts">ＮＣコード数値の桁数の処理方法</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NumCode.GCodeMirror(CamUtil.LCode.NcDigit)">
            <summary>
            ミラーしたＧコードを作成します
            G02 - G03 ,6 G41 - G42
            </summary>
            <param name="post">ＣＡＭから出力されたＮＣデータの数値桁数の処理方法</param>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.NumCode.Equals(CamUtil.LCode.NcLineCode.NumCode)">
            <summary>このインスタンスと指定した numCode オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が numCode のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.Xisf">
            <summary>
            ＮＣデータの位置と回転送りの情報を保存します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.op_Equality(CamUtil.LCode.NcLineCode.Xisf,CamUtil.LCode.NcLineCode.Xisf)">
            <summary>ＮＣデータの位置と回転送りの情報の＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.op_Inequality(CamUtil.LCode.NcLineCode.Xisf,CamUtil.LCode.NcLineCode.Xisf)">
            <summary>ＮＣデータの位置と回転送りの情報の！＝演算子</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.g94">
            <summary>送りモード現在（毎分/毎回転）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.preG94">
            <summary>送りモード直前（毎分/毎回転）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.S">
            <summary>回転数</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.F">
            <summary>送り速度現在</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.preF">
            <summary>送り速度直前</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.xyza">
            <summary>移動する位置</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.Xisf.ipls">
            <summary>移動する距離と方向</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Dist">
            <summary>移動ベクトル</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Item(System.Char)">
            <summary>
            各メンバーの実数値を出力します
            </summary>
            <param name="nc">ＮＣのキャラクタコード</param>
            <returns>各実数値</returns>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.X">
            <summary>最終到達位置Ｘ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Y">
            <summary>最終到達位置Ｙ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Z">
            <summary>最終到達位置Ｚ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.A">
            <summary>最終到達位置Ａ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.B">
            <summary>最終到達位置Ｂ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.C">
            <summary>最終到達位置Ｃ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Xi">
            <summary>整数化X</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Yi">
            <summary>整数化Y</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Zi">
            <summary>整数化Z</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Ai">
            <summary>整数化A</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Bi">
            <summary>整数化B</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Ci">
            <summary>整数化C</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Si">
            <summary>整数化S</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.Fi">
            <summary>整数化F 送り未設定の場合は０とする 2015/09/24</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreX">
            <summary>直前到達位置Ｘ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreY">
            <summary>直前到達位置Ｙ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreZ">
            <summary>直前到達位置Ｚ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreA">
            <summary>直前到達位置Ａ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreB">
            <summary>直前到達位置Ｂ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreC">
            <summary>直前到達位置Ｃ</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.Xisf.PreFi">
            <summary>整数化F 送り未設定の場合は０とします</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.#ctor(System.Double)">
            <summary>
            全メンバーを初期化して作成します
            </summary>
            <param name="apz">アプローチＺの値</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.#ctor(CamUtil.LCode.NcLineCode.Xisf,System.Int16,System.Nullable{System.Double},System.Nullable{System.Double},CamUtil.Ichi)">
            <summary>
            新たな位置、回転数、送り速度データより作成します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.#ctor(CamUtil.LCode.NcLineCode.Xisf,CamUtil.Vector3)">
            <summary>
            座標系移動を反映した xisf を作成します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.#ctor(CamUtil.LCode.NcLineCode.Xisf,CamUtil.NcZahyo)">
            <summary>
            ミラーを反映した xisf を作成します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.Next(CamUtil.BaseNcForm,System.Boolean,CamUtil.LCode.NumList,System.Int16,System.Int16,System.Byte,System.Object)">
            <summary>
            ＮＣデータコードのリストからＧ９モードを考慮し xisf を作成します
            </summary>
            <param name="ncForm">ＮＣデータのフォーマット</param>
            <param name="regular">ＰＴＰの正式フォーマットのＮＣデータの場合 true</param>
            <param name="numList">ＮＣデータコードのリスト</param>
            <param name="g5">Ｇ５グループ（送り速度モード）の値</param>
            <param name="g9">Ｇ９グループ（ＡＢＳ/ＩＮＣ）の値</param>
            <param name="cyclemode">サイクル値（0:一般、1:固定サイクル、2:カスタムマクロモード内[Ｇコードの設定なし]、3:G65セット、4:カスタムマクロモードのセット）</param>
            <param name="cycle">固定サイクルあるいはマクロ呼出しサイクルの情報</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.ToXYZ">
            <summary>最終到達位置ＸＹＺのストラクチャVector3 を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.ToABC">
            <summary>最終到達位置ＡＢＣのストラクチャVector3 を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.PreToXYZ">
            <summary>直前到達位置のストラクチャVector3 を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.Mirror(CamUtil.NcZahyo)">
            <summary>座標系ミラー処理後の座標値を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.Transfer(CamUtil.Vector3)">
            <summary>座標系移動処理後の座標値を出力します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.Equals(System.Object)">
            <summary>このインスタンスと指定した xisf オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が xisf のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.Xisf.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.CycleMode">
            <summary>
            固定サイクルのモーダル値を表します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.op_Equality(CamUtil.LCode.NcLineCode.CycleMode,CamUtil.LCode.NcLineCode.CycleMode)">
            <summary>固定サイクルの＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.op_Inequality(CamUtil.LCode.NcLineCode.CycleMode,CamUtil.LCode.NcLineCode.CycleMode)">
            <summary>固定サイクルの！＝演算子</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.progNo">
            <summary>固定サイクル番号（80, 81, 82, 83, 84, 86, 73）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.z">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.p">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.q">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.r">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.i">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.j">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.f">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.l">
            <summary>固定サイクルデータ（Z, P, Q, R, I, J, F, L）</summary>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.CycleMode.ModeSub">
            <summary>
            固定サイクルの個々のコードを表します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.op_Equality(CamUtil.LCode.NcLineCode.CycleMode.ModeSub,CamUtil.LCode.NcLineCode.CycleMode.ModeSub)">
            <summary>位置座標値の＝＝演算子。誤差がIchi.Gosa以内</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.op_Inequality(CamUtil.LCode.NcLineCode.CycleMode.ModeSub,CamUtil.LCode.NcLineCode.CycleMode.ModeSub)">
            <summary>位置座標値の！＝演算子。誤差がIchi.Gosa以上</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.Set">
            <summary>この情報が定義済の場合 true</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.B">
            <summary>この行で設定された場合 true</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.D">
            <summary>コードの値。未定義の場合はエラーとなります</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.pfl">
            <summary>整数値で出力されるコード（P, F, L）の場合は true、そうでなければ false。</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.L">
            <summary>コードの値を整数値で出力します。整数値で出力しないコード（Z, Q, R, I, J）の場合はエラーとなります。</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.#ctor(System.Boolean,System.Nullable{System.Double},System.Boolean)">
            <summary>各プロパティ値により作成します</summary>
            <param name="data">設定の有無</param>
            <param name="value">コードの値</param>
            <param name="pfl">整数値</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.#ctor(System.Boolean)">
            <summary>
            未定義のデータを作成します
            </summary>
            <param name="pfl"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.ModeSetL(System.Double)">
            <summary>
            ＮＣコードの値を設定して新たな ModeSub を作成します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.RLine">
            <summary>
            次の行の情報とするため、この行で未設定として新たな ModeSub を作成します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.Equals(System.Object)">
            <summary>このインスタンスと指定した CycleMode.ModeSub オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が CycleMode.ModeSub のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ModeSub.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.#ctor(System.Int16)">
            <summary>未定義のデータを作成します</summary>
            <param name="gCode">固定サイクルのＧコード</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.#ctor(CamUtil.LCode.NcLineCode.CycleMode)">
            <summary>前行の情報から、次行処理のためこの行で未設定なコードとして作成します</summary>
            <param name="src">前行の CycleMode</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.#ctor(CamUtil.LCode.NcLineCode.CycleMode,CamUtil.LCode.NumList,System.Int16,System.Double)">
            <summary>ＮＣデータコードのリストから元の CycleMode を元に作成します</summary>
            <param name="moto">元の CycleMode</param>
            <param name="numList">ＮＣデータコードのリスト</param>
            <param name="g9">Ｇコードグループ03 絶対相対モード(ABSG90,INCG91)</param>
            <param name="clp">穴加工のクリアランス高さ</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.CycleSetL(CamUtil.LCode.NumList,System.Int16,System.Double)">
            <summary>
            このインスタンスを元に、ＮＣデータコードのリストから新たな CycleMode を作成します
            </summary>
            <param name="numList">ＮＣデータコードのリスト</param>
            <param name="g9">Ｇコードグループ03 絶対相対モード(ABSG90,INCG91)</param>
            <param name="clp">穴加工のクリアランス高さ</param>
            <returns>新たに作成された CycleMode</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.ResetLine">
            <summary>
            このインスタンスを元に、次行処理のためこの行で未設定なコードとして新たな CycleMode を作成します
            </summary>
            <returns>新たに作成された CycleMode</returns>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.CycleMode.Item(System.Char)">
            <summary>
            インデクサ
            </summary>
            <param name="nc">情報を取り出すＮＣコード</param>
            <returns>指定したＮＣコードを表す ModeSub</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.Equals(System.Object)">
            <summary>このインスタンスと指定した CycleMode オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が CycleMode のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.CycleMode.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.MacroMode">
            <summary>
            カスタムマクロのモーダル値を保存します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.op_Equality(CamUtil.LCode.NcLineCode.MacroMode,CamUtil.LCode.NcLineCode.MacroMode)">
            <summary>カスタムマクロのモーダル値の＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.op_Inequality(CamUtil.LCode.NcLineCode.MacroMode,CamUtil.LCode.NcLineCode.MacroMode)">
            <summary>カスタムマクロのモーダル値の！＝演算子</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.ProgName">
            <summary>プログラム名</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.ProgNo">
            <summary>プログラム番号</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.Repeat">
            <summary>繰り返し回数</summary>
        </member>
        <member name="T:CamUtil.LCode.NcLineCode.MacroMode.ModeSub">
            <summary>個々のカスタムマクロのＮＣコードを表します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.op_Equality(CamUtil.LCode.NcLineCode.MacroMode.ModeSub,CamUtil.LCode.NcLineCode.MacroMode.ModeSub)">
            <summary>カスタムマクロのモーダル値の＝＝演算子</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.op_Inequality(CamUtil.LCode.NcLineCode.MacroMode.ModeSub,CamUtil.LCode.NcLineCode.MacroMode.ModeSub)">
            <summary>カスタムマクロのモーダル値の！＝演算子</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.Set">
            <summary>定義済みの場合は true</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.D">
            <summary>ＮＣデータの値。未定義の場合はエラーとなります</summary>
        </member>
        <member name="F:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.cc">
            <summary>ＮＣコード</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.#ctor(System.Char)">
            <summary>未定義として作成します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.#ctor(System.Char,System.Double)">
            <summary>ＮＣコードの値で定義して作成します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.ModeSet(System.Double)">
            <summary>このインスタンスを元にＮＣコードの値を定義して作成します</summary>
            <param name="d">ＮＣコードの値</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.Equals(System.Object)">
            <summary>このインスタンスと指定した MacroMode.ModeSub オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が MacroMode.ModeSub のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.ModeSub.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.#ctor(System.Int32)">
            <summary>
            すべてのコードが未定義として作成します
            </summary>
            <param name="dummy">ダミーです</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.#ctor(CamUtil.LCode.NcLineCode.MacroMode,CamUtil.LCode.NumList)">
            <summary>
            ＮＣコードのリストから作成します
            </summary>
            <param name="moto">元の情報</param>
            <param name="numList">ＮＣコードのリスト</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.MacroSet(CamUtil.LCode.NumList)">
            <summary>
            このインスタンスを元にＮＣコードのリストから新たに MacroMode を作成します
            </summary>
            <param name="numList">ＮＣコードのリスト</param>
            <returns>新たに作成した MacroMode</returns>
        </member>
        <member name="P:CamUtil.LCode.NcLineCode.MacroMode.Item(System.Char)">
            <summary>
            インデクサ
            </summary>
            <param name="nc">情報を取り出すＮＣコード</param>
            <returns>指定したＮＣコードを表す ModeSub</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.Equals(System.Object)">
            <summary>このインスタンスと指定した MacroMode オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が MacroMode のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="M:CamUtil.LCode.NcLineCode.MacroMode.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcLineQue">
            <summary>
            NcLineCode をNcQueueで使用するための派生クラスです。
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcLineQue.LnumbSet(System.Collections.Generic.Queue{CamUtil.LCode.NcLineQue})">
            <summary>
            処理前のキューに入った NcLineQue に後ろから数えた行数 lnumb をセットします。
            </summary>
            <param name="que"></param>
        </member>
        <member name="F:CamUtil.LCode.NcLineQue.source">
            <summary>このデータの元となったNcLineQue（Convで連続変換する場合に使用）add in 2016/05/17</summary>
        </member>
        <member name="P:CamUtil.LCode.NcLineQue.Lnumb">
            <summary>後ろから数えたマイナス値の行数</summary>
            <remarks>キューに入れられた後、ファイルエンドとなった時に処理前の行に設定されます。
            最終行が -1で以下 -2, -3 となります。未設定時は０です。</remarks>
        </member>
        <member name="M:CamUtil.LCode.NcLineQue.#ctor(System.Double[],CamUtil.BaseNcForm,CamUtil.LCode.NcDigit,System.Boolean,System.Boolean)">
            <summary>
            開始行を作成します
            </summary>
            <param name="p_apz">開始のＺ座標値。工具ごとに指定します</param>
            <param name="baseForm">ＮＣの基本フォーマット名（"GENERAL" or "_5AXIS"）</param>
            <param name="post">ＣＡＭポストの小数点桁数</param>
            <param name="p_commentOutput">出力時にＮＣデータとともにコメントも出力する場合は true</param>
            <param name="p_regular">既定のフォーマットに変換されたＮＣデータの場合は true</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineQue.NextLine(System.String,CamUtil.LCode.NcLineQue)">
            <summary>
            前行の情報を元に、指定されたＮＣデータの１行を解析し作成します。元のインスタンスは変更されません。
            </summary>
            <param name="readline">ＮＣデータの１行</param>
            <param name="link">同一行の変換履歴を辿るために保存する、前の変換のNcLineQueへのリンク</param>
        </member>
        <member name="M:CamUtil.LCode.NcLineQue.AddG123">
            <summary>
            行頭にG01, G02, G03 を挿入したNcLineCodeを作成します。すでにそれらのＧコードが存在する場合と早送りモードの場合はエラーとなります。
            </summary>
            <remarks>連続変換するためには[不変]ではなく、インスタンスを変更しなければなりません</remarks>
        </member>
        <member name="M:CamUtil.LCode.NcLineQue.Equals(CamUtil.LCode.NcLineQue)">
            <summary>このインスタンスと指定した NcLineQue オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj が CamUtil.NcLineQue のインスタンスで、このインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcQueue">
            <summary>
            ＮＣデータ情報（NcLineCode）処理行の前後を Queue&gt;NcLineCode&lt; を用いて保存します。
            </summary>
        </member>
        <member name="T:CamUtil.LCode.NcQueue.QUEINFO">
            <summary>
            キューの状態を表します
            </summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.QUEINFO.NOTFULL">
            <summary>キューへ蓄積中で出力なし</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.QUEINFO.NORMAL">
            <summary>入出力正常</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.QUEINFO.EMPTY">
            <summary>キューが空になり出力行がない（終了）</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.queMaxNum">
            <summary>キューに入れておくＮＣデータの前後それぞれの最大行数。処理後の行数には現在行も含まれます</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.ncline_Bef">
            <summary>処理前のＮＣデータを保存するキュー</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.ncline_Aft">
            <summary>処理後のＮＣデータを保存するキュー</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.ncline_Now">
            <summary>現在処理中のＮＣデータ行</summary>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.ncCodeLast">
            <summary>最後に取込んだＮＣデータ行</summary>
        </member>
        <member name="P:CamUtil.LCode.NcQueue.QueueMax">
            <summary>this[], NcPeek()呼出しで使用可能な最大値。処理前のＮＣデータ参照の行数</summary>
        </member>
        <member name="P:CamUtil.LCode.NcQueue.QueueMin">
            <summary>this[], NcPeek()呼出しで使用可能な最小値。１から処理後のＮＣデータ参照の行数を引いた値</summary>
        </member>
        <member name="P:CamUtil.LCode.NcQueue.Item(System.Int32)">
            <summary>
            処理前後のＮＣデータを返します。処理前の最大行数は queMaxNum 、処理後は queMaxNum-1 です。
            </summary>
            <param name="index">処理前後のＮＣデータの位置。０は現在行で QueueMin 以上、 QueueMax 以下</param>
            <returns>指定された行のＮＣデータ</returns>
        </member>
        <member name="F:CamUtil.LCode.NcQueue.dummyData">
            <summary>ダミーが入っている場合は true</summary>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.#ctor(System.Int32)">
            <summary>
            NCSEND2 用に作成します
            </summary>
            <param name="queMaxNum">保存するＮＣデータの前後それぞれの最大行数</param>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.#ctor(System.Int32,System.Boolean,System.Double[],CamUtil.BaseNcForm,CamUtil.LCode.NcDigit,System.Boolean,System.Boolean)">
            <summary>
            初期値を指定して NcQueue を作成します
            </summary>
            <param name="queMaxNum">保存するＮＣデータの前後それぞれの最大行数</param>
            <param name="nconly">ＮＣコード以外の情報を消去する場合は true</param>
            <param name="apz">最初の工具のＺ座標値</param>
            <param name="baseForm">ＮＣの基本フォーマット</param>
            <param name="post">ＣＡＭポストの小数点桁数</param>
            <param name="commentOutput">コメントを出力する場合は true</param>
            <param name="p_regular">既定のフォーマットに変換されたＮＣデータの場合は true</param>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.NcDeque(CamUtil.LCode.NcLineQue)">
            <summary>
            ＮＣデータ１行のキューの処理を実行します。入力は ncCodeLast に、出力は ncline_Now に入ります。
            </summary>
            <param name="ncCode">入力するＮＣデータの情報</param>
            <returns>キューの状態（NOTFULL:キューへ蓄積中、NORMAL:入出力正常、EMPTY:キューが空）</returns>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.NcDeque">
            <summary>
            ＮＣデータ１行のキューの処理を実行します。入力として ncCodeLast を用い、出力は ncline_Now です。 ncCodeLast は変化しません。
            </summary>
            <returns>キューの状態（NOTFULL:キューへ蓄積中、NORMAL:入出力正常、EMPTY:キューが空）</returns>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.NcPeek(System.Int32)">
            <summary>
            処理前後のＮＣデータを返します。処理前の最大行数は queMaxNum 、処理後は queMaxNum-1 です。
            </summary>
            <param name="suf">処理前後のＮＣデータの位置。０は現在行で QueueMin 以上、 QueueMax 以下</param>
            <returns>指定された行のＮＣデータ</returns>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.NextLine(System.IO.StreamReader)">
            <summary>
            指定されたストリームからＮＣデータを取得解析し、前行の情報 ncCodeLast を最新情報に更新する。
            その後キューの処理を実行し、処理前キューがいっぱいになり現在行 ncline_Now が出力されるまで繰り返す。
            </summary>
            <returns>現在行ＮＣデータ</returns>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.NextLine(System.String,CamUtil.LCode.NcLineQue)">
            <summary>
            指定されたＮＣデータを解析し、前行の情報 ncCodeLast を最新情報に更新します。
            その後キューの処理を実行し、iread == QUEINFO.NORMAL の場合現在行 ncline_Now を出力します
            </summary>
            <param name="ncLine">次のＮＣデータ行</param>
            <param name="moto">同一行の変換履歴を辿るために保存する、前の変換のNcLineCodeへのリンク</param>
            <returns>キューの状態（NOTFULL:キューへ蓄積中、NORMAL:入出力正常、EMPTY:キューが空）</returns>
        </member>
        <member name="M:CamUtil.LCode.NcQueue.Skip(System.String,System.IO.StreamReader)">
            <summary>
            無意味なＮＣデータを読み飛ばします
            </summary>
            <param name="readline">ＮＣデータ行</param>
            <param name="sr">ストリーム</param>
            <returns>読み飛ばす場合 true</returns>
        </member>
        <member name="T:CamUtil.LCode.NumList">
            <summary>
            ＮＣデータ１行内に含まれるＮＣコードのリストを読み取り専用として公開します。
            </summary>
        </member>
        <member name="T:CamUtil.LCode.NumList.NumListData">
            <summary>
            ＮＣデータ１行内に含まれるＮＣコードのリスト。List&lt;NcLineCode.numCode&gt;を private readonly として隠蔽します。
            </summary>
        </member>
        <member name="F:CamUtil.LCode.NumList.NumListData.numL">
            <summary>ＮＣデータ１行内に含まれるＮＣコードのリスト</summary>
        </member>
        <member name="F:CamUtil.LCode.NumList.NumListData.AsReadOnly">
            <summary>ＮＣデータ１行内に含まれるＮＣコードの読み取り専用のリスト</summary>
        </member>
        <member name="M:CamUtil.LCode.NumList.NumListData.#ctor">
            <summary>空のリストを作成します</summary>
        </member>
        <member name="M:CamUtil.LCode.NumList.NumListData.#ctor(CamUtil.LCode.NcLineCode.NumCode)">
            <summary>単一の NcLineCode.numCode より作成します</summary>
            <param name="num">ＮＣコード１件の情報</param>
        </member>
        <member name="M:CamUtil.LCode.NumList.NumListData.#ctor(System.Collections.Generic.IEnumerable{CamUtil.LCode.NcLineCode.NumCode})">
            <summary>指定した配列よりコピーした要素から作成します</summary>
            <param name="array">ＮＣコード情報の配列</param>
        </member>
        <member name="M:CamUtil.LCode.NumList.NumListData.#ctor(System.String,CamUtil.LCode.NcDigit)">
            <summary>
            ＮＣデータ入力行ncLineから作成します。
            </summary>
            <param name="ncLine">ＮＣデータ入力行</param>
            <param name="post">ＣＡＭポストの小数点桁数</param>
        </member>
        <member name="M:CamUtil.LCode.NumList.#ctor(System.Collections.Generic.IList{CamUtil.LCode.NcLineCode.NumCode})">
            <summary>
            ＮＣデータ１行内に含まれるＮＣコードのリストの読み取り専用インスタンスを作成します
            </summary>
            <param name="array">元のNcLineCode.numCodeのリスト</param>
        </member>
        <member name="M:CamUtil.LCode.NumList.NcCount(System.Char)">
            <summary>
            ＮＣコードごとのＮＣデータ１行内での指定数を出力します
            </summary>
            <param name="cc">出力するＮＣコード</param>
            <returns>ＮＣコードの１行内での指定数</returns>
        </member>
        <member name="M:CamUtil.LCode.NumList.Code(System.Char)">
            <summary>
            ＮＣデータ１行に定義されたＮＣコードの最初に見つかった情報を出力します。存在しない場合はSystem.ArgumentNullExceptionとなります
            </summary>
            <param name="cc">出力するＮＣコード</param>
            <returns>コードの情報</returns>
        </member>
        <member name="M:CamUtil.LCode.NumList.Equals(System.Collections.Generic.List{CamUtil.LCode.NcLineCode.NumCode})">
            <summary>このインスタンスと指定した NumListRO オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.LCode.OutLine">
            <summary>
            ＮＣデータを出力する複数行を保存します。
            </summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.Txt">
            <summary>変換後のＮＣデータ</summary>
        </member>
        <member name="F:CamUtil.LCode.OutLine.mae">
            <summary>前に追加する複数のＮＣデータ</summary>
        </member>
        <member name="F:CamUtil.LCode.OutLine.ato">
            <summary>後ろに追加する複数のＮＣデータ</summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.CommOut">
            <summary>コメントを出力する場合は true</summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.Comment">
            <summary>出力するコメント</summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.OutputNo">
            <summary>次に出力すべき行の番号。１行づつ出力する場合に使用します</summary>
        </member>
        <member name="M:CamUtil.LCode.OutLine.#ctor(System.Boolean)">
            <summary>
            未定義のデータとして作成する唯一のコンストラクタ
            </summary>
            <param name="comm">コメントを出力する場合は true</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Clone">
            <summary>クローンを作成します</summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Set(System.String)">
            <summary>
            前後に追加した行はそのままで、ＮＣデータの出力１行を指定した文字列で置き換えます
            </summary>
            <param name="ncline">置き換える文字列</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Set(System.String,System.String)">
            <summary>
            前後に追加した行はそのままで、ＮＣデータの出力１行とコメントを指定した文字列で置き換えます
            </summary>
            <param name="ncline">置き換えるＮＣ文字列</param>
            <param name="comment">置き換えるコメント文字列</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.MaeAdd(System.String)">
            <summary>基準の行の直前に行を追加します</summary>
        </member>
        <member name="M:CamUtil.LCode.OutLine.MaeInsert(System.String)">
            <summary>最初の行の前に行を追加します</summary>
        </member>
        <member name="M:CamUtil.LCode.OutLine.AtoAdd(System.String)">
            <summary>最後の行の後ろに行を追加します</summary>
        </member>
        <member name="M:CamUtil.LCode.OutLine.AtoInsert(System.String)">
            <summary>基準の行の直後に行を追加します</summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.Count">
            <summary>
            出力するＮＣデータの行数を返します。コメントのみが出力される行も含みます。
            </summary>
        </member>
        <member name="P:CamUtil.LCode.OutLine.Item(System.Int32)">
            <summary>
            出力する行の１行を返します
            </summary>
            <param name="lineNo">行を指定する数値。０以上、Count未満です。</param>
            <returns>指定した１行の文字列</returns>
        </member>
        <member name="M:CamUtil.LCode.OutLine.NcLineOut">
            <summary>
            出力するＮＣデータの全行を一括して返します。行末は"\r\n"です
            </summary>
            <returns></returns>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Sequence(System.Int64@)">
            <summary>
            シーケンス番号を挿入します
            </summary>
            <param name="seqNo">この値に１を加えた後に挿入します</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.AddString(System.String)">
            <summary>
            各行の末尾に指定の文字列を追加します
            </summary>
            <param name="str">追加する文字列</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Addcomment(System.String)">
            <summary>
            出力するコメントを追加します。すでにコメントが存在する場合は末尾にスペースを加えて追加します。コメント出力可否は変化しません。
            </summary>
            <param name="comm">追加するコメント</param>
        </member>
        <member name="M:CamUtil.LCode.OutLine.DelelseComment">
            <summary>コメントを削除します</summary>
        </member>
        <member name="M:CamUtil.LCode.OutLine.Equals(CamUtil.LCode.OutLine)">
            <summary>このインスタンスと指定した OutLine オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>obj がこのインスタンスの値に等しい場合は true。それ以外の場合は false。</returns>
        </member>
        <member name="T:CamUtil.LCode.NcDigit">
            <summary>
            元のＮＣデータの各コードの仕様を設定します[不変]
            </summary>
        </member>
        <member name="F:CamUtil.LCode.NcDigit.indexCoodinate">
            <summary>LCode.NumCode で使用する座標値を表すＮＣコードです。ＣＡＭや加工機は異なることがあります。</summary>
        </member>
        <member name="P:CamUtil.LCode.NcDigit.Data">
            <summary>各ＮＣデータコードＡ－Ｚの仕様</summary>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.#ctor">
            <summary>
            NcTejun の場合（usr9/ASDM/PTP, NCSPEED_edit, NCSPEED_org のフォーマット）の Post を作成します
            </summary>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.#ctor(CamUtil.PostProcessor)">
            <summary>
            ポストプロセッサから NcDigit を作成します
            </summary>
            <param name="post">ポストプロセッサ</param>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.#ctor(CamUtil.Machine.MachID,System.Int32)">
            <summary>
            加工機情報から NcDigit を作成します
            </summary>
            <param name="machID">ポストの名称</param>
            <param name="digit">座標値の場合で小数点なしの場合の単位を表します</param>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.#ctor(System.String,System.Int32)">
            <summary>
            座標値のＮＣコードリストとその単位から NcDigit を作成します
            </summary>
            <param name="zahyo">座標値のリストです</param>
            <param name="digit">座標値の場合で小数点なしの場合の単位を表します</param>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.#ctor(CamUtil.LCode.NcDigit)">
            <summary>
            ディープコピーコンストラクタ
            </summary>
        </member>
        <member name="T:CamUtil.LCode.NcDigit.NcDigits">
            <summary>
            各ＮＣコードの小数点の処理方法を設定する
            </summary>
        </member>
        <member name="F:CamUtil.LCode.NcDigit.NcDigits.symbol">
            <summary>ＮＣコードが記号（;%/(#）の場合</summary>
        </member>
        <member name="F:CamUtil.LCode.NcDigit.NcDigits.axis">
            <summary>ＮＣコードが座標値を表す場合trueとなります</summary>
        </member>
        <member name="F:CamUtil.LCode.NcDigit.NcDigits.sdgt">
            <summary>ＮＣコードが座標値で小数点なしの場合の桁数を表します</summary>
        </member>
        <member name="M:CamUtil.LCode.NcDigit.NcDigits.#ctor(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="p_axis"></param>
            <param name="p_sdgt"></param>
        </member>
        <member name="T:CamUtil.LCode.StreamNcR2">
            <summary>
            変換仕様NcConvertのリストを使用してＮＣデータを連続的に変換します。
            </summary>
        </member>
        <member name="T:CamUtil.LCode.StreamNcR2.NcFormCheck">
            <summary>入力ＮＣデータをチェックする</summary>
        </member>
        <member name="F:CamUtil.LCode.StreamNcR2.stdEndCode">
            <summary>ＮＣデータの標準行末コード</summary>
        </member>
        <member name="F:CamUtil.LCode.StreamNcR2.ncConvs">
            <summary>変換仕様のリスト</summary>
        </member>
        <member name="F:CamUtil.LCode.StreamNcR2.outLines">
            <summary>各変換後の出力ＮＣデータのリスト</summary>
        </member>
        <member name="F:CamUtil.LCode.StreamNcR2.lastConv">
            <summary>ＮＣ行の変換履歴を保存します</summary>
        </member>
        <member name="P:CamUtil.LCode.StreamNcR2.MaxLineNo">
            <summary>ＮＣデータの行数（進行状況の表示に使用 ADD in 2016/07/29）</summary>
        </member>
        <member name="P:CamUtil.LCode.StreamNcR2.Interval">
            <summary>ＮＣデータの表示間隔（進行状況の表示に使用 ADD in 2016/07/29）</summary>
        </member>
        <member name="F:CamUtil.LCode.StreamNcR2.nctchk">
            <summary>ＮＣデータのチェックの実行</summary>
        </member>
        <member name="M:CamUtil.LCode.StreamNcR2.#ctor(System.String,CamUtil.LCode.StreamNcR2.NcFormCheck,CamUtil.LCode.INcConvert[])">
            <summary>
            唯一のコンストラクタです。
            </summary>
            <param name="path">ＮＣデータのファイル名</param>
            <param name="p_nctchk">入力されたＮＣデータのチェック</param>
            <param name="aa">変換仕様のリスト</param>
        </member>
        <member name="M:CamUtil.LCode.StreamNcR2.ReadLine">
            <summary>
            ＮＣデータの変換リストを連続処理します
            </summary>
            <returns>すべての変換後の最終ＮＣデータ行</returns>
        </member>
        <member name="M:CamUtil.LCode.StreamNcR2.ReadLine(System.Int32)">
            <summary>
            ＮＣデータの変換とキューの処理を実行します。StreamNcR.ReadLineと自身から呼び出されます。
            </summary>
            <remarks>
            １つの変換で複数の行が出力された場合は outLines[index].outputNo を用いて１行ずつ処理します。
            最終変換から実行され、再帰的に前の変換仕様を呼出して出力されるＮＣデータ１行を取得します。
            </remarks>
            <param name="index">処理する変換仕様のインデックス</param>
            <returns>変換されたＮＣデータ行</returns>
        </member>
    </members>
</doc>
